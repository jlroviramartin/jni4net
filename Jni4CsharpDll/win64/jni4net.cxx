/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_JNI(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_JNI(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_JNI(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "win32/jni_md.h"
#include "jni.h"



  template <class T>
  class Ref {
  private:
    T* pobject = NULL;
  public:
    T* getValue() { return pobject; }
    void setValue(T* pvalue) { pobject = pvalue; }
  };

  template <class T>
  class Buffer {
  private:
    T** buffer = NULL;
    jsize bufferLength;
    jsize length;
  public:
    Buffer(jsize bufferLength) {
      this->buffer = new T*[bufferLength];
      this->bufferLength = bufferLength;
      this->length = 0;
    }
    T** getBuffer() { return buffer; }
    void setBuffer(T** value) { buffer = value; }
    T* get(jsize i) { return buffer[i]; }
    void set(jsize i, T* pobj) { buffer[i] = pobj; }
    jsize getBufferLength() { return bufferLength; }
    jsize getLength() { return length; }
    void setLength(jsize value) { length = value; }
  };

  template <class T>
  class PrimitiveArray {
  private:
    T* buffer = NULL;
    PrimitiveArray(T* buffer) {
      this->buffer = buffer;
    }
  public:
    static PrimitiveArray* create(T* buffer) {
      return new PrimitiveArray(buffer);
    }
    T* getBuffer() { return buffer; }
    void setBuffer(T* value) { buffer = value; }
    T get(jsize i) { return buffer[i]; }
    void set(jsize i, T value) { buffer[i] = value; }
  };

  class PrimitiveArray_jboolean {
  private:
    jboolean* buffer = NULL;
    PrimitiveArray_jboolean(jboolean* buffer) {
      this->buffer = buffer;
    }
  public:
    static PrimitiveArray_jboolean* create(jboolean* buffer) {
      return new PrimitiveArray_jboolean(buffer);
    }
    jboolean* getBuffer() { return buffer; }
    void setBuffer(jboolean* value) { buffer = value; }
    bool get(jsize i) { return buffer[i]; }
    void set(jsize i, bool value) { buffer[i] = value; }
  };

  class PrimitiveArray_jchar {
  private:
    jchar* buffer = NULL;
    PrimitiveArray_jchar(jchar* buffer) {
      this->buffer = buffer;
    }
  public:
    static PrimitiveArray_jchar* create(jchar* buffer) {
      return new PrimitiveArray_jchar(buffer);
    }
    jchar* getBuffer() { return buffer; }
    void setBuffer(jchar* value) { buffer = value; }
    char get(jsize i) { return buffer[i]; }
    void set(jsize i, char value) { buffer[i] = value; }
  };


SWIGINTERN JavaVMInitArgs *JavaVMInitArgs_create__SWIG_0(jint version){
      JavaVMInitArgs* pargs = new JavaVMInitArgs();
      pargs->ignoreUnrecognized = JNI_TRUE;
      pargs->version = version;
      pargs->nOptions = 0;
      pargs->options = NULL;
      return pargs;
    }
SWIGINTERN JavaVMInitArgs *JavaVMInitArgs_create__SWIG_1(jint version,jint nOptions){
      JavaVMInitArgs* pargs = new JavaVMInitArgs();
      pargs->ignoreUnrecognized = JNI_TRUE;
      pargs->version = version;
      pargs->nOptions = nOptions;
      if (nOptions > 0) {
        pargs->options = new JavaVMOption[nOptions];
      } else {
        pargs->options = NULL;
      }
      return pargs;
    }
SWIGINTERN jint JavaVMInitArgs_getOptions(JavaVMInitArgs *self){ return self->nOptions; }
SWIGINTERN void JavaVMInitArgs_setOptions(JavaVMInitArgs *self,jint value){
      if (self->options != NULL) {
        delete self->options;
        self->options = NULL;
      }

      self->nOptions = value;
      if (self->nOptions > 0) {
        self->options = new JavaVMOption[self->nOptions];
      }
    }
SWIGINTERN JavaVMOption JavaVMInitArgs_get(JavaVMInitArgs *self,jint i){ return self->options[i]; }
SWIGINTERN void JavaVMInitArgs_set(JavaVMInitArgs *self,jint i,JavaVMOption value){ self->options[i] = value; }
SWIGINTERN jboolean JavaVMInitArgs_isIgnoreUnrecognized(JavaVMInitArgs *self){ return self->ignoreUnrecognized; }
SWIGINTERN void JavaVMInitArgs_setIgnoreUnrecognized(JavaVMInitArgs *self,jboolean value){ self->ignoreUnrecognized = value; }
SWIGINTERN jint JavaVM__GetDefaultJavaVMInitArgs(JavaVMInitArgs *args){
    return JNI_GetDefaultJavaVMInitArgs((void*)args);
  }
SWIGINTERN jint JavaVM__CreateJavaVM(Ref< JavaVM > *refvm,Ref< JNIEnv > *refenv,JavaVMInitArgs *args){
    JavaVM* vm = refvm->getValue();
    JNIEnv* env = refenv->getValue();
    jint ret = JNI_CreateJavaVM(&vm, (void**)&env, (void*)args);
    if (ret == JNI_OK) {
      refvm->setValue(vm);
      refenv->setValue(env);
    }
    return ret;
  }
SWIGINTERN jint JavaVM__GetCreatedJavaVMs(Buffer< JavaVM > *refvm){
    JavaVM** buffer = refvm->getBuffer();
    jsize bufferLength = refvm->getBufferLength();
    jsize length = 0;
    jint ret = JNI_GetCreatedJavaVMs(buffer, bufferLength, &length);
    if (ret == JNI_OK) {
      refvm->setBuffer(buffer);
      refvm->setLength(length);
    }
    return ret;
  }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_VaList___() {
  void * jresult ;
  va_list *result = 0 ;
  
  result = (va_list *)new va_list();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_va_list___(void * jarg1) {
  va_list *arg1 = (va_list *) 0 ;
  
  arg1 = (va_list *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jboolean_get___(void * jarg1, long jarg2) {
  unsigned int jresult ;
  PrimitiveArray_jboolean *arg1 = (PrimitiveArray_jboolean *) 0 ;
  jsize arg2 ;
  bool result;
  
  arg1 = (PrimitiveArray_jboolean *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (bool)(arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jboolean_set___(void * jarg1, long jarg2, unsigned int jarg3) {
  PrimitiveArray_jboolean *arg1 = (PrimitiveArray_jboolean *) 0 ;
  jsize arg2 ;
  bool arg3 ;
  
  arg1 = (PrimitiveArray_jboolean *)jarg1; 
  arg2 = (jsize)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_PrimitiveArray_jboolean___(void * jarg1) {
  PrimitiveArray_jboolean *arg1 = (PrimitiveArray_jboolean *) 0 ;
  
  arg1 = (PrimitiveArray_jboolean *)jarg1; 
  delete arg1;
}


SWIGEXPORT char SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jchar_get___(void * jarg1, long jarg2) {
  char jresult ;
  PrimitiveArray_jchar *arg1 = (PrimitiveArray_jchar *) 0 ;
  jsize arg2 ;
  char result;
  
  arg1 = (PrimitiveArray_jchar *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (char)(arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jchar_set___(void * jarg1, long jarg2, char jarg3) {
  PrimitiveArray_jchar *arg1 = (PrimitiveArray_jchar *) 0 ;
  jsize arg2 ;
  char arg3 ;
  
  arg1 = (PrimitiveArray_jchar *)jarg1; 
  arg2 = (jsize)jarg2; 
  arg3 = (char)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_PrimitiveArray_jchar___(void * jarg1) {
  PrimitiveArray_jchar *arg1 = (PrimitiveArray_jchar *) 0 ;
  
  arg1 = (PrimitiveArray_jchar *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_Ref_JavaVM_getValue___(void * jarg1) {
  void * jresult ;
  Ref< JavaVM > *arg1 = (Ref< JavaVM > *) 0 ;
  JavaVM *result = 0 ;
  
  arg1 = (Ref< JavaVM > *)jarg1; 
  result = (JavaVM *)(arg1)->getValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_Ref_JavaVM_setValue___(void * jarg1, void * jarg2) {
  Ref< JavaVM > *arg1 = (Ref< JavaVM > *) 0 ;
  JavaVM *arg2 = (JavaVM *) 0 ;
  
  arg1 = (Ref< JavaVM > *)jarg1; 
  arg2 = (JavaVM *)jarg2; 
  (arg1)->setValue(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_Ref_JavaVM___() {
  void * jresult ;
  Ref< JavaVM > *result = 0 ;
  
  result = (Ref< JavaVM > *)new Ref< JavaVM >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_Ref_JavaVM___(void * jarg1) {
  Ref< JavaVM > *arg1 = (Ref< JavaVM > *) 0 ;
  
  arg1 = (Ref< JavaVM > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_Ref_JNIEnv_getValue___(void * jarg1) {
  void * jresult ;
  Ref< JNIEnv > *arg1 = (Ref< JNIEnv > *) 0 ;
  JNIEnv *result = 0 ;
  
  arg1 = (Ref< JNIEnv > *)jarg1; 
  result = (JNIEnv *)(arg1)->getValue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_Ref_JNIEnv_setValue___(void * jarg1, void * jarg2) {
  Ref< JNIEnv > *arg1 = (Ref< JNIEnv > *) 0 ;
  JNIEnv *arg2 = (JNIEnv *) 0 ;
  
  arg1 = (Ref< JNIEnv > *)jarg1; 
  arg2 = (JNIEnv *)jarg2; 
  (arg1)->setValue(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_Ref_JNIEnv___() {
  void * jresult ;
  Ref< JNIEnv > *result = 0 ;
  
  result = (Ref< JNIEnv > *)new Ref< JNIEnv >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_Ref_JNIEnv___(void * jarg1) {
  Ref< JNIEnv > *arg1 = (Ref< JNIEnv > *) 0 ;
  
  arg1 = (Ref< JNIEnv > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_Buffer_JavaVM___(long jarg1) {
  void * jresult ;
  jsize arg1 ;
  Buffer< JavaVM > *result = 0 ;
  
  arg1 = (jsize)jarg1; 
  result = (Buffer< JavaVM > *)new Buffer< JavaVM >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_Buffer_JavaVM_get___(void * jarg1, long jarg2) {
  void * jresult ;
  Buffer< JavaVM > *arg1 = (Buffer< JavaVM > *) 0 ;
  jsize arg2 ;
  JavaVM *result = 0 ;
  
  arg1 = (Buffer< JavaVM > *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (JavaVM *)(arg1)->get(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_Buffer_JavaVM_getBufferLength___(void * jarg1) {
  long jresult ;
  Buffer< JavaVM > *arg1 = (Buffer< JavaVM > *) 0 ;
  jsize result;
  
  arg1 = (Buffer< JavaVM > *)jarg1; 
  result = (jsize)(arg1)->getBufferLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_Buffer_JavaVM_getLength___(void * jarg1) {
  long jresult ;
  Buffer< JavaVM > *arg1 = (Buffer< JavaVM > *) 0 ;
  jsize result;
  
  arg1 = (Buffer< JavaVM > *)jarg1; 
  result = (jsize)(arg1)->getLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_Buffer_JavaVM___(void * jarg1) {
  Buffer< JavaVM > *arg1 = (Buffer< JavaVM > *) 0 ;
  
  arg1 = (Buffer< JavaVM > *)jarg1; 
  delete arg1;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jbyte_get___(void * jarg1, long jarg2) {
  signed char jresult ;
  PrimitiveArray< jbyte > *arg1 = (PrimitiveArray< jbyte > *) 0 ;
  jsize arg2 ;
  jbyte result;
  
  arg1 = (PrimitiveArray< jbyte > *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jbyte)(arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jbyte_set___(void * jarg1, long jarg2, signed char jarg3) {
  PrimitiveArray< jbyte > *arg1 = (PrimitiveArray< jbyte > *) 0 ;
  jsize arg2 ;
  jbyte arg3 ;
  
  arg1 = (PrimitiveArray< jbyte > *)jarg1; 
  arg2 = (jsize)jarg2; 
  arg3 = (jbyte)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_PrimitiveArray_jbyte___(void * jarg1) {
  PrimitiveArray< jbyte > *arg1 = (PrimitiveArray< jbyte > *) 0 ;
  
  arg1 = (PrimitiveArray< jbyte > *)jarg1; 
  delete arg1;
}


SWIGEXPORT short SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jshort_get___(void * jarg1, long jarg2) {
  short jresult ;
  PrimitiveArray< jshort > *arg1 = (PrimitiveArray< jshort > *) 0 ;
  jsize arg2 ;
  jshort result;
  
  arg1 = (PrimitiveArray< jshort > *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jshort)(arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jshort_set___(void * jarg1, long jarg2, short jarg3) {
  PrimitiveArray< jshort > *arg1 = (PrimitiveArray< jshort > *) 0 ;
  jsize arg2 ;
  jshort arg3 ;
  
  arg1 = (PrimitiveArray< jshort > *)jarg1; 
  arg2 = (jsize)jarg2; 
  arg3 = (jshort)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_PrimitiveArray_jshort___(void * jarg1) {
  PrimitiveArray< jshort > *arg1 = (PrimitiveArray< jshort > *) 0 ;
  
  arg1 = (PrimitiveArray< jshort > *)jarg1; 
  delete arg1;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jint_get___(void * jarg1, long jarg2) {
  long jresult ;
  PrimitiveArray< jint > *arg1 = (PrimitiveArray< jint > *) 0 ;
  jsize arg2 ;
  jint result;
  
  arg1 = (PrimitiveArray< jint > *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jint)(arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jint_set___(void * jarg1, long jarg2, long jarg3) {
  PrimitiveArray< jint > *arg1 = (PrimitiveArray< jint > *) 0 ;
  jsize arg2 ;
  jint arg3 ;
  
  arg1 = (PrimitiveArray< jint > *)jarg1; 
  arg2 = (jsize)jarg2; 
  arg3 = (jint)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_PrimitiveArray_jint___(void * jarg1) {
  PrimitiveArray< jint > *arg1 = (PrimitiveArray< jint > *) 0 ;
  
  arg1 = (PrimitiveArray< jint > *)jarg1; 
  delete arg1;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jlong_get___(void * jarg1, long jarg2) {
  long long jresult ;
  PrimitiveArray< jlong > *arg1 = (PrimitiveArray< jlong > *) 0 ;
  jsize arg2 ;
  jlong result;
  
  arg1 = (PrimitiveArray< jlong > *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jlong_set___(void * jarg1, long jarg2, long long jarg3) {
  PrimitiveArray< jlong > *arg1 = (PrimitiveArray< jlong > *) 0 ;
  jsize arg2 ;
  jlong arg3 ;
  
  arg1 = (PrimitiveArray< jlong > *)jarg1; 
  arg2 = (jsize)jarg2; 
  arg3 = (jlong)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_PrimitiveArray_jlong___(void * jarg1) {
  PrimitiveArray< jlong > *arg1 = (PrimitiveArray< jlong > *) 0 ;
  
  arg1 = (PrimitiveArray< jlong > *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jfloat_get___(void * jarg1, long jarg2) {
  float jresult ;
  PrimitiveArray< jfloat > *arg1 = (PrimitiveArray< jfloat > *) 0 ;
  jsize arg2 ;
  jfloat result;
  
  arg1 = (PrimitiveArray< jfloat > *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jfloat)(arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jfloat_set___(void * jarg1, long jarg2, float jarg3) {
  PrimitiveArray< jfloat > *arg1 = (PrimitiveArray< jfloat > *) 0 ;
  jsize arg2 ;
  jfloat arg3 ;
  
  arg1 = (PrimitiveArray< jfloat > *)jarg1; 
  arg2 = (jsize)jarg2; 
  arg3 = (jfloat)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_PrimitiveArray_jfloat___(void * jarg1) {
  PrimitiveArray< jfloat > *arg1 = (PrimitiveArray< jfloat > *) 0 ;
  
  arg1 = (PrimitiveArray< jfloat > *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jdouble_get___(void * jarg1, long jarg2) {
  double jresult ;
  PrimitiveArray< jdouble > *arg1 = (PrimitiveArray< jdouble > *) 0 ;
  jsize arg2 ;
  jdouble result;
  
  arg1 = (PrimitiveArray< jdouble > *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jdouble)(arg1)->get(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_PrimitiveArray_jdouble_set___(void * jarg1, long jarg2, double jarg3) {
  PrimitiveArray< jdouble > *arg1 = (PrimitiveArray< jdouble > *) 0 ;
  jsize arg2 ;
  jdouble arg3 ;
  
  arg1 = (PrimitiveArray< jdouble > *)jarg1; 
  arg2 = (jsize)jarg2; 
  arg3 = (jdouble)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_PrimitiveArray_jdouble___(void * jarg1) {
  PrimitiveArray< jdouble > *arg1 = (PrimitiveArray< jdouble > *) 0 ;
  
  arg1 = (PrimitiveArray< jdouble > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JObject___() {
  void * jresult ;
  _jobject *result = 0 ;
  
  result = (_jobject *)new _jobject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JObject___(void * jarg1) {
  _jobject *arg1 = (_jobject *) 0 ;
  
  arg1 = (_jobject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JClass___() {
  void * jresult ;
  _jclass *result = 0 ;
  
  result = (_jclass *)new _jclass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JClass___(void * jarg1) {
  _jclass *arg1 = (_jclass *) 0 ;
  
  arg1 = (_jclass *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JThrowable___() {
  void * jresult ;
  _jthrowable *result = 0 ;
  
  result = (_jthrowable *)new _jthrowable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JThrowable___(void * jarg1) {
  _jthrowable *arg1 = (_jthrowable *) 0 ;
  
  arg1 = (_jthrowable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JString___() {
  void * jresult ;
  _jstring *result = 0 ;
  
  result = (_jstring *)new _jstring();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JString___(void * jarg1) {
  _jstring *arg1 = (_jstring *) 0 ;
  
  arg1 = (_jstring *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JArray___() {
  void * jresult ;
  _jarray *result = 0 ;
  
  result = (_jarray *)new _jarray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JArray___(void * jarg1) {
  _jarray *arg1 = (_jarray *) 0 ;
  
  arg1 = (_jarray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JBooleanArray___() {
  void * jresult ;
  _jbooleanArray *result = 0 ;
  
  result = (_jbooleanArray *)new _jbooleanArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JBooleanArray___(void * jarg1) {
  _jbooleanArray *arg1 = (_jbooleanArray *) 0 ;
  
  arg1 = (_jbooleanArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JByteArray___() {
  void * jresult ;
  _jbyteArray *result = 0 ;
  
  result = (_jbyteArray *)new _jbyteArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JByteArray___(void * jarg1) {
  _jbyteArray *arg1 = (_jbyteArray *) 0 ;
  
  arg1 = (_jbyteArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JCharArray___() {
  void * jresult ;
  _jcharArray *result = 0 ;
  
  result = (_jcharArray *)new _jcharArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JCharArray___(void * jarg1) {
  _jcharArray *arg1 = (_jcharArray *) 0 ;
  
  arg1 = (_jcharArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JShortArray___() {
  void * jresult ;
  _jshortArray *result = 0 ;
  
  result = (_jshortArray *)new _jshortArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JShortArray___(void * jarg1) {
  _jshortArray *arg1 = (_jshortArray *) 0 ;
  
  arg1 = (_jshortArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JIntArray___() {
  void * jresult ;
  _jintArray *result = 0 ;
  
  result = (_jintArray *)new _jintArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JIntArray___(void * jarg1) {
  _jintArray *arg1 = (_jintArray *) 0 ;
  
  arg1 = (_jintArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JLongArray___() {
  void * jresult ;
  _jlongArray *result = 0 ;
  
  result = (_jlongArray *)new _jlongArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JLongArray___(void * jarg1) {
  _jlongArray *arg1 = (_jlongArray *) 0 ;
  
  arg1 = (_jlongArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JFloatArray___() {
  void * jresult ;
  _jfloatArray *result = 0 ;
  
  result = (_jfloatArray *)new _jfloatArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JFloatArray___(void * jarg1) {
  _jfloatArray *arg1 = (_jfloatArray *) 0 ;
  
  arg1 = (_jfloatArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JDoubleArray___() {
  void * jresult ;
  _jdoubleArray *result = 0 ;
  
  result = (_jdoubleArray *)new _jdoubleArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JDoubleArray___(void * jarg1) {
  _jdoubleArray *arg1 = (_jdoubleArray *) 0 ;
  
  arg1 = (_jdoubleArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JObjectArray___() {
  void * jresult ;
  _jobjectArray *result = 0 ;
  
  result = (_jobjectArray *)new _jobjectArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JObjectArray___(void * jarg1) {
  _jobjectArray *arg1 = (_jobjectArray *) 0 ;
  
  arg1 = (_jobjectArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JValue_z_set___(void * jarg1, unsigned char jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jboolean arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jboolean)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JValue_z_get___(void * jarg1) {
  unsigned char jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jboolean result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jboolean) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JValue_b_set___(void * jarg1, signed char jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jbyte arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jbyte)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_esfjni_JValue_b_get___(void * jarg1) {
  signed char jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jbyte result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jbyte) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JValue_c_set___(void * jarg1, unsigned short jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jchar arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jchar)jarg2; 
  if (arg1) (arg1)->c = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_esfjni_JValue_c_get___(void * jarg1) {
  unsigned short jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jchar result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jchar) ((arg1)->c);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JValue_s_set___(void * jarg1, short jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jshort arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jshort)jarg2; 
  if (arg1) (arg1)->s = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_esfjni_JValue_s_get___(void * jarg1) {
  short jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jshort result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jshort) ((arg1)->s);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JValue_i_set___(void * jarg1, long jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jint arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jint)jarg2; 
  if (arg1) (arg1)->i = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JValue_i_get___(void * jarg1) {
  long jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jint result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jint) ((arg1)->i);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JValue_j_set___(void * jarg1, long long jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jlong arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jlong)jarg2; 
  if (arg1) (arg1)->j = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_esfjni_JValue_j_get___(void * jarg1) {
  long long jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jlong result;
  
  arg1 = (jvalue *)jarg1; 
  result =  ((arg1)->j);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JValue_f_set___(void * jarg1, float jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jfloat arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jfloat)jarg2; 
  if (arg1) (arg1)->f = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_esfjni_JValue_f_get___(void * jarg1) {
  float jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jfloat result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jfloat) ((arg1)->f);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JValue_d_set___(void * jarg1, double jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jdouble arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jdouble)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_esfjni_JValue_d_get___(void * jarg1) {
  double jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jdouble result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jdouble) ((arg1)->d);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JValue_l_set___(void * jarg1, void * jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jobject arg2 = (jobject) 0 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jobject)jarg2; 
  if (arg1) (arg1)->l = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JValue_l_get___(void * jarg1) {
  void * jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jobject result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jobject) ((arg1)->l);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JValue___() {
  void * jresult ;
  jvalue *result = 0 ;
  
  result = (jvalue *)new jvalue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JValue___(void * jarg1) {
  jvalue *arg1 = (jvalue *) 0 ;
  
  arg1 = (jvalue *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_FALSE_get___() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_TRUE_get___() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_OK_get___() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_ERR_get___() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_EDETACHED_get___() {
  int jresult ;
  int result;
  
  result = (int)((-2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_EVERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)((-3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_ENOMEM_get___() {
  int jresult ;
  int result;
  
  result = (int)((-4));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_EEXIST_get___() {
  int jresult ;
  int result;
  
  result = (int)((-5));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_EINVAL_get___() {
  int jresult ;
  int result;
  
  result = (int)((-6));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_COMMIT_get___() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_ABORT_get___() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNINativeMethod_name_set___(void * jarg1, char * jarg2) {
  JNINativeMethod *arg1 = (JNINativeMethod *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (JNINativeMethod *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_esfjni_JNINativeMethod_name_get___(void * jarg1) {
  char * jresult ;
  JNINativeMethod *arg1 = (JNINativeMethod *) 0 ;
  char *result = 0 ;
  
  arg1 = (JNINativeMethod *)jarg1; 
  result = (char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNINativeMethod_signature_set___(void * jarg1, char * jarg2) {
  JNINativeMethod *arg1 = (JNINativeMethod *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (JNINativeMethod *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->signature;
    if (arg2) {
      arg1->signature = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->signature, (const char *)arg2);
    } else {
      arg1->signature = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_esfjni_JNINativeMethod_signature_get___(void * jarg1) {
  char * jresult ;
  JNINativeMethod *arg1 = (JNINativeMethod *) 0 ;
  char *result = 0 ;
  
  arg1 = (JNINativeMethod *)jarg1; 
  result = (char *) ((arg1)->signature);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNINativeMethod_fnPtr_set___(void * jarg1, void * jarg2) {
  JNINativeMethod *arg1 = (JNINativeMethod *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (JNINativeMethod *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->fnPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNINativeMethod_fnPtr_get___(void * jarg1) {
  void * jresult ;
  JNINativeMethod *arg1 = (JNINativeMethod *) 0 ;
  void *result = 0 ;
  
  arg1 = (JNINativeMethod *)jarg1; 
  result = (void *) ((arg1)->fnPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JNINativeMethod___() {
  void * jresult ;
  JNINativeMethod *result = 0 ;
  
  result = (JNINativeMethod *)new JNINativeMethod();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JNINativeMethod___(void * jarg1) {
  JNINativeMethod *arg1 = (JNINativeMethod *) 0 ;
  
  arg1 = (JNINativeMethod *)jarg1; 
  delete arg1;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_GetVersion___(void * jarg1) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  result = (jint)(arg1)->GetVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_DefineClass___(void * jarg1, char * jarg2, void * jarg3, signed char* jarg4, long jarg5) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  char *arg2 = (char *) 0 ;
  jobject arg3 = (jobject) 0 ;
  jbyte *arg4 = (jbyte *) 0 ;
  jsize arg5 ;
  jclass result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (jobject)jarg3; 
  arg4 = jarg4;
  arg5 = (jsize)jarg5; 
  result = (jclass)(arg1)->DefineClass((char const *)arg2,arg3,(jbyte const *)arg4,arg5);
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_FindClass___(void * jarg1, char * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  char *arg2 = (char *) 0 ;
  jclass result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (jclass)(arg1)->FindClass((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT  jmethodID  SWIGSTDCALL CSharp_esfjni_JNIEnv_FromReflectedMethod___(void * jarg1, void * jarg2) {
  jmethodID  jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jmethodID)(arg1)->FromReflectedMethod(arg2);
  jresult = *(jmethodID*)&result; 
  return jresult;
}


SWIGEXPORT  jfieldID  SWIGSTDCALL CSharp_esfjni_JNIEnv_FromReflectedField___(void * jarg1, void * jarg2) {
  jfieldID  jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jfieldID)(arg1)->FromReflectedField(arg2);
  jresult = *(jfieldID*)&result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_ToReflectedMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3, unsigned char jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jboolean arg4 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jboolean)jarg4; 
  result = (jobject)(arg1)->ToReflectedMethod(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_GetSuperclass___(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jclass result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  result = (jclass)(arg1)->GetSuperclass(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JNIEnv_IsAssignableFrom___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jclass arg3 = (jclass) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = (jclass)jarg3; 
  result = (jboolean)(arg1)->IsAssignableFrom(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_ToReflectedField___(void * jarg1, void * jarg2,  jfieldID  jarg3, unsigned char jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jboolean arg4 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jboolean)jarg4; 
  result = (jobject)(arg1)->ToReflectedField(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_Throw___(void * jarg1, void * jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jthrowable arg2 = (jthrowable) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jthrowable)jarg2; 
  result = (jint)(arg1)->Throw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_ThrowNew___(void * jarg1, void * jarg2, char * jarg3) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  char *arg3 = (char *) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = (char *)jarg3; 
  result = (jint)(arg1)->ThrowNew(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_ExceptionOccurred___(void * jarg1) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jthrowable result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  result = (jthrowable)(arg1)->ExceptionOccurred();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_ExceptionDescribe___(void * jarg1) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  (arg1)->ExceptionDescribe();
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_ExceptionClear___(void * jarg1) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  (arg1)->ExceptionClear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_FatalError___(void * jarg1, char * jarg2) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->FatalError((char const *)arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_PushLocalFrame___(void * jarg1, long jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jint arg2 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jint)jarg2; 
  result = (jint)(arg1)->PushLocalFrame(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_PopLocalFrame___(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jobject)(arg1)->PopLocalFrame(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewGlobalRef___(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jobject)(arg1)->NewGlobalRef(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_DeleteGlobalRef___(void * jarg1, void * jarg2) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  (arg1)->DeleteGlobalRef(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_DeleteLocalRef___(void * jarg1, void * jarg2) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  (arg1)->DeleteLocalRef(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JNIEnv_IsSameObject___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jobject arg3 = (jobject) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jobject)jarg3; 
  result = (jboolean)(arg1)->IsSameObject(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewLocalRef___(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jobject)(arg1)->NewLocalRef(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_EnsureLocalCapacity___(void * jarg1, long jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jint arg2 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jint)jarg2; 
  result = (jint)(arg1)->EnsureLocalCapacity(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_AllocObject___(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  result = (jobject)(arg1)->AllocObject(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewObject___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jobject)(arg1)->NewObject(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewObjectV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jobject)(arg1)->NewObjectV(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewObjectA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jobject)(arg1)->NewObjectA(arg2,arg3,(jvalue const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_GetObjectClass___(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jclass)(arg1)->GetObjectClass(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JNIEnv_IsInstanceOf___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  result = (jboolean)(arg1)->IsInstanceOf(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT  jmethodID  SWIGSTDCALL CSharp_esfjni_JNIEnv_GetMethodID___(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  jmethodID  jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  jmethodID result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (jmethodID)(arg1)->GetMethodID(arg2,(char const *)arg3,(char const *)arg4);
  jresult = *(jmethodID*)&result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_CallObjectMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jobject)(arg1)->CallObjectMethod(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_CallObjectMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jobject)(arg1)->CallObjectMethodV(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_CallObjectMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jobject)(arg1)->CallObjectMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallBooleanMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jboolean)(arg1)->CallBooleanMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallBooleanMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jboolean)(arg1)->CallBooleanMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallBooleanMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jboolean)(arg1)->CallBooleanMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallByteMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jbyte)(arg1)->CallByteMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallByteMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jbyte)(arg1)->CallByteMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallByteMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jbyte)(arg1)->CallByteMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallCharMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jchar)(arg1)->CallCharMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallCharMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jchar)(arg1)->CallCharMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallCharMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jchar)(arg1)->CallCharMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallShortMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jshort)(arg1)->CallShortMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallShortMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jshort)(arg1)->CallShortMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallShortMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jshort)(arg1)->CallShortMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallIntMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jint)(arg1)->CallIntMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallIntMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jint)(arg1)->CallIntMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallIntMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jint)(arg1)->CallIntMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallLongMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (arg1)->CallLongMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallLongMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->CallLongMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallLongMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (arg1)->CallLongMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_esfjni_JNIEnv_CallFloatMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jfloat)(arg1)->CallFloatMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_esfjni_JNIEnv_CallFloatMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jfloat)(arg1)->CallFloatMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_esfjni_JNIEnv_CallFloatMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jfloat)(arg1)->CallFloatMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_esfjni_JNIEnv_CallDoubleMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jdouble)(arg1)->CallDoubleMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_esfjni_JNIEnv_CallDoubleMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jdouble)(arg1)->CallDoubleMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_esfjni_JNIEnv_CallDoubleMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jdouble)(arg1)->CallDoubleMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_CallVoidMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  (arg1)->CallVoidMethod(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_CallVoidMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->CallVoidMethodV(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_CallVoidMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  (arg1)->CallVoidMethodA(arg2,arg3,(jvalue const *)arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualObjectMethod___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jobject)(arg1)->CallNonvirtualObjectMethod(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualObjectMethodV___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jobject)(arg1)->CallNonvirtualObjectMethodV(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualObjectMethodA___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jobject)(arg1)->CallNonvirtualObjectMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualBooleanMethod___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jboolean)(arg1)->CallNonvirtualBooleanMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualBooleanMethodV___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jboolean)(arg1)->CallNonvirtualBooleanMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualBooleanMethodA___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jboolean)(arg1)->CallNonvirtualBooleanMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualByteMethod___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jbyte)(arg1)->CallNonvirtualByteMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualByteMethodV___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jbyte)(arg1)->CallNonvirtualByteMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualByteMethodA___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jbyte)(arg1)->CallNonvirtualByteMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualCharMethod___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jchar)(arg1)->CallNonvirtualCharMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualCharMethodV___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jchar)(arg1)->CallNonvirtualCharMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualCharMethodA___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jchar)(arg1)->CallNonvirtualCharMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualShortMethod___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jshort)(arg1)->CallNonvirtualShortMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualShortMethodV___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jshort)(arg1)->CallNonvirtualShortMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualShortMethodA___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jshort)(arg1)->CallNonvirtualShortMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualIntMethod___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jint)(arg1)->CallNonvirtualIntMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualIntMethodV___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jint)(arg1)->CallNonvirtualIntMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualIntMethodA___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jint)(arg1)->CallNonvirtualIntMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualLongMethod___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (arg1)->CallNonvirtualLongMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualLongMethodV___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (arg1)->CallNonvirtualLongMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualLongMethodA___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (arg1)->CallNonvirtualLongMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualFloatMethod___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jfloat)(arg1)->CallNonvirtualFloatMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualFloatMethodV___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jfloat)(arg1)->CallNonvirtualFloatMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualFloatMethodA___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jfloat)(arg1)->CallNonvirtualFloatMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualDoubleMethod___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jdouble)(arg1)->CallNonvirtualDoubleMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualDoubleMethodV___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jdouble)(arg1)->CallNonvirtualDoubleMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualDoubleMethodA___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jdouble)(arg1)->CallNonvirtualDoubleMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualVoidMethod___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  (arg1)->CallNonvirtualVoidMethod(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualVoidMethodV___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->CallNonvirtualVoidMethodV(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_CallNonvirtualVoidMethodA___(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  (arg1)->CallNonvirtualVoidMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
}


SWIGEXPORT  jfieldID  SWIGSTDCALL CSharp_esfjni_JNIEnv_GetFieldID___(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  jfieldID  jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  jfieldID result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (jfieldID)(arg1)->GetFieldID(arg2,(char const *)arg3,(char const *)arg4);
  jresult = *(jfieldID*)&result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_GetObjectField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jobject)(arg1)->GetObjectField(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JNIEnv_GetBooleanField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jboolean)(arg1)->GetBooleanField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_esfjni_JNIEnv_GetByteField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jbyte)(arg1)->GetByteField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_esfjni_JNIEnv_GetCharField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jchar)(arg1)->GetCharField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_esfjni_JNIEnv_GetShortField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jshort)(arg1)->GetShortField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_GetIntField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jint)(arg1)->GetIntField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_esfjni_JNIEnv_GetLongField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (arg1)->GetLongField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_esfjni_JNIEnv_GetFloatField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jfloat)(arg1)->GetFloatField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_esfjni_JNIEnv_GetDoubleField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jdouble)(arg1)->GetDoubleField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetObjectField___(void * jarg1, void * jarg2,  jfieldID  jarg3, void * jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jobject arg4 = (jobject) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jobject)jarg4; 
  (arg1)->SetObjectField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetBooleanField___(void * jarg1, void * jarg2,  jfieldID  jarg3, unsigned char jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jboolean arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jboolean)jarg4; 
  (arg1)->SetBooleanField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetByteField___(void * jarg1, void * jarg2,  jfieldID  jarg3, signed char jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jbyte arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jbyte)jarg4; 
  (arg1)->SetByteField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetCharField___(void * jarg1, void * jarg2,  jfieldID  jarg3, unsigned short jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jchar arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jchar)jarg4; 
  (arg1)->SetCharField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetShortField___(void * jarg1, void * jarg2,  jfieldID  jarg3, short jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jshort arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jshort)jarg4; 
  (arg1)->SetShortField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetIntField___(void * jarg1, void * jarg2,  jfieldID  jarg3, long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jint arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jint)jarg4; 
  (arg1)->SetIntField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetLongField___(void * jarg1, void * jarg2,  jfieldID  jarg3, long long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jlong arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jlong)jarg4; 
  (arg1)->SetLongField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetFloatField___(void * jarg1, void * jarg2,  jfieldID  jarg3, float jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jfloat arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jfloat)jarg4; 
  (arg1)->SetFloatField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetDoubleField___(void * jarg1, void * jarg2,  jfieldID  jarg3, double jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jdouble arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jdouble)jarg4; 
  (arg1)->SetDoubleField(arg2,arg3,arg4);
}


SWIGEXPORT  jmethodID  SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStaticMethodID___(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  jmethodID  jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  jmethodID result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (jmethodID)(arg1)->GetStaticMethodID(arg2,(char const *)arg3,(char const *)arg4);
  jresult = *(jmethodID*)&result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticObjectMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jobject)(arg1)->CallStaticObjectMethod(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticObjectMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jobject)(arg1)->CallStaticObjectMethodV(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticObjectMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jobject)(arg1)->CallStaticObjectMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticBooleanMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jboolean)(arg1)->CallStaticBooleanMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticBooleanMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jboolean)(arg1)->CallStaticBooleanMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticBooleanMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jboolean)(arg1)->CallStaticBooleanMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticByteMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jbyte)(arg1)->CallStaticByteMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticByteMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jbyte)(arg1)->CallStaticByteMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticByteMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jbyte)(arg1)->CallStaticByteMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticCharMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jchar)(arg1)->CallStaticCharMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticCharMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jchar)(arg1)->CallStaticCharMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticCharMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jchar)(arg1)->CallStaticCharMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticShortMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jshort)(arg1)->CallStaticShortMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticShortMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jshort)(arg1)->CallStaticShortMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticShortMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jshort)(arg1)->CallStaticShortMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticIntMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jint)(arg1)->CallStaticIntMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticIntMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jint)(arg1)->CallStaticIntMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticIntMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jint)(arg1)->CallStaticIntMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticLongMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (arg1)->CallStaticLongMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticLongMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->CallStaticLongMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticLongMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (arg1)->CallStaticLongMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticFloatMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jfloat)(arg1)->CallStaticFloatMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticFloatMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jfloat)(arg1)->CallStaticFloatMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticFloatMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jfloat)(arg1)->CallStaticFloatMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticDoubleMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jdouble)(arg1)->CallStaticDoubleMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticDoubleMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jdouble)(arg1)->CallStaticDoubleMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticDoubleMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jdouble)(arg1)->CallStaticDoubleMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticVoidMethod___(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  (arg1)->CallStaticVoidMethod(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticVoidMethodV___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->CallStaticVoidMethodV(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_CallStaticVoidMethodA___(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  (arg1)->CallStaticVoidMethodA(arg2,arg3,(jvalue const *)arg4);
}


SWIGEXPORT  jfieldID  SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStaticFieldID___(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  jfieldID  jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  jfieldID result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (jfieldID)(arg1)->GetStaticFieldID(arg2,(char const *)arg3,(char const *)arg4);
  jresult = *(jfieldID*)&result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStaticObjectField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jobject)(arg1)->GetStaticObjectField(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStaticBooleanField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jboolean)(arg1)->GetStaticBooleanField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStaticByteField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jbyte)(arg1)->GetStaticByteField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStaticCharField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jchar)(arg1)->GetStaticCharField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStaticShortField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jshort)(arg1)->GetStaticShortField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStaticIntField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jint)(arg1)->GetStaticIntField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStaticLongField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (arg1)->GetStaticLongField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStaticFloatField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jfloat)(arg1)->GetStaticFloatField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStaticDoubleField___(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jdouble)(arg1)->GetStaticDoubleField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetStaticObjectField___(void * jarg1, void * jarg2,  jfieldID  jarg3, void * jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jobject arg4 = (jobject) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jobject)jarg4; 
  (arg1)->SetStaticObjectField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetStaticBooleanField___(void * jarg1, void * jarg2,  jfieldID  jarg3, unsigned char jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jboolean arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jboolean)jarg4; 
  (arg1)->SetStaticBooleanField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetStaticByteField___(void * jarg1, void * jarg2,  jfieldID  jarg3, signed char jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jbyte arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jbyte)jarg4; 
  (arg1)->SetStaticByteField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetStaticCharField___(void * jarg1, void * jarg2,  jfieldID  jarg3, unsigned short jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jchar arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jchar)jarg4; 
  (arg1)->SetStaticCharField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetStaticShortField___(void * jarg1, void * jarg2,  jfieldID  jarg3, short jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jshort arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jshort)jarg4; 
  (arg1)->SetStaticShortField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetStaticIntField___(void * jarg1, void * jarg2,  jfieldID  jarg3, long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jint arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jint)jarg4; 
  (arg1)->SetStaticIntField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetStaticLongField___(void * jarg1, void * jarg2,  jfieldID  jarg3, long long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jlong arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jlong)jarg4; 
  (arg1)->SetStaticLongField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetStaticFloatField___(void * jarg1, void * jarg2,  jfieldID  jarg3, float jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jfloat arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jfloat)jarg4; 
  (arg1)->SetStaticFloatField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetStaticDoubleField___(void * jarg1, void * jarg2,  jfieldID  jarg3, double jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jdouble arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jdouble)jarg4; 
  (arg1)->SetStaticDoubleField(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewString___(void * jarg1, void * jarg2, long jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jchar *arg2 = (jchar *) 0 ;
  jsize arg3 ;
  jstring result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jchar *)jarg2; 
  arg3 = (jsize)jarg3; 
  result = (jstring)(arg1)->NewString((jchar const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStringLength___(void * jarg1, void * jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jsize result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  result = (jsize)(arg1)->GetStringLength(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStringChars___(void * jarg1, void * jarg2, unsigned int * jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  jchar *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (jchar *)(arg1)->GetStringChars(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_ReleaseStringChars___(void * jarg1, void * jarg2, void * jarg3) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jchar *arg3 = (jchar *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (jchar *)jarg3; 
  (arg1)->ReleaseStringChars(arg2,(jchar const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewStringUTF___(void * jarg1, char * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  char *arg2 = (char *) 0 ;
  jstring result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (jstring)(arg1)->NewStringUTF((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStringUTFLength___(void * jarg1, void * jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jsize result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  result = (jsize)(arg1)->GetStringUTFLength(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStringUTFChars___(void * jarg1, void * jarg2, unsigned int * jarg3) {
  char * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  char *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (char *)(arg1)->GetStringUTFChars(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_ReleaseStringUTFChars___(void * jarg1, void * jarg2, char * jarg3) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->ReleaseStringUTFChars(arg2,(char const *)arg3);
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_GetArrayLength___(void * jarg1, void * jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jarray arg2 = (jarray) 0 ;
  jsize result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jarray)jarg2; 
  result = (jsize)(arg1)->GetArrayLength(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewObjectArray___(void * jarg1, long jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jclass arg3 = (jclass) 0 ;
  jobject arg4 = (jobject) 0 ;
  jobjectArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = (jobject)jarg4; 
  result = (jobjectArray)(arg1)->NewObjectArray(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_GetObjectArrayElement___(void * jarg1, void * jarg2, long jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobjectArray arg2 = (jobjectArray) 0 ;
  jsize arg3 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobjectArray)jarg2; 
  arg3 = (jsize)jarg3; 
  result = (jobject)(arg1)->GetObjectArrayElement(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetObjectArrayElement___(void * jarg1, void * jarg2, long jarg3, void * jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobjectArray arg2 = (jobjectArray) 0 ;
  jsize arg3 ;
  jobject arg4 = (jobject) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobjectArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jobject)jarg4; 
  (arg1)->SetObjectArrayElement(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewBooleanArray___(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jbooleanArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jbooleanArray)(arg1)->NewBooleanArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewByteArray___(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jbyteArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jbyteArray)(arg1)->NewByteArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewCharArray___(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jcharArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jcharArray)(arg1)->NewCharArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewShortArray___(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jshortArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jshortArray)(arg1)->NewShortArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewIntArray___(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jintArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jintArray)(arg1)->NewIntArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewLongArray___(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jlongArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jlongArray)(arg1)->NewLongArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewFloatArray___(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jfloatArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jfloatArray)(arg1)->NewFloatArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewDoubleArray___(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jdoubleArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jdoubleArray)(arg1)->NewDoubleArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_GetBooleanArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, unsigned char* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jbooleanArray arg2 = (jbooleanArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jboolean *arg5 = (jboolean *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jbooleanArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetBooleanArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_GetByteArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, signed char* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jbyteArray arg2 = (jbyteArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jbyte *arg5 = (jbyte *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jbyteArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetByteArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_GetCharArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, unsigned short* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jcharArray arg2 = (jcharArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jchar *arg5 = (jchar *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jcharArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetCharArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_GetShortArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, short* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jshortArray arg2 = (jshortArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jshort *arg5 = (jshort *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jshortArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetShortArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_GetIntArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, long* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jintArray arg2 = (jintArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jint *arg5 = (jint *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jintArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetIntArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_GetLongArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, long long* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jlongArray arg2 = (jlongArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jlong *arg5 = (jlong *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jlongArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetLongArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_GetFloatArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, float* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jfloatArray arg2 = (jfloatArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jfloat *arg5 = (jfloat *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jfloatArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetFloatArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_GetDoubleArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, double* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jdoubleArray arg2 = (jdoubleArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jdouble *arg5 = (jdouble *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jdoubleArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetDoubleArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetBooleanArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, unsigned char* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jbooleanArray arg2 = (jbooleanArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jboolean *arg5 = (jboolean *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jbooleanArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetBooleanArrayRegion(arg2,arg3,arg4,(jboolean const *)arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetByteArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, signed char* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jbyteArray arg2 = (jbyteArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jbyte *arg5 = (jbyte *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jbyteArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetByteArrayRegion(arg2,arg3,arg4,(jbyte const *)arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetCharArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, unsigned short* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jcharArray arg2 = (jcharArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jchar *arg5 = (jchar *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jcharArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetCharArrayRegion(arg2,arg3,arg4,(jchar const *)arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetShortArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, short* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jshortArray arg2 = (jshortArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jshort *arg5 = (jshort *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jshortArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetShortArrayRegion(arg2,arg3,arg4,(jshort const *)arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetIntArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, long* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jintArray arg2 = (jintArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jint *arg5 = (jint *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jintArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetIntArrayRegion(arg2,arg3,arg4,(jint const *)arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetLongArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, long long* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jlongArray arg2 = (jlongArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jlong *arg5 = (jlong *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jlongArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetLongArrayRegion(arg2,arg3,arg4,(jlong const *)arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetFloatArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, float* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jfloatArray arg2 = (jfloatArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jfloat *arg5 = (jfloat *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jfloatArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetFloatArrayRegion(arg2,arg3,arg4,(jfloat const *)arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_SetDoubleArrayRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, double* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jdoubleArray arg2 = (jdoubleArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jdouble *arg5 = (jdouble *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jdoubleArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetDoubleArrayRegion(arg2,arg3,arg4,(jdouble const *)arg5);
  
  
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_RegisterNatives___(void * jarg1, void * jarg2, void * jarg3, long jarg4) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  JNINativeMethod *arg3 = (JNINativeMethod *) 0 ;
  jint arg4 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = (JNINativeMethod *)jarg3; 
  arg4 = (jint)jarg4; 
  result = (jint)(arg1)->RegisterNatives(arg2,(JNINativeMethod const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_UnregisterNatives___(void * jarg1, void * jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  result = (jint)(arg1)->UnregisterNatives(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_MonitorEnter___(void * jarg1, void * jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jint)(arg1)->MonitorEnter(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JNIEnv_MonitorExit___(void * jarg1, void * jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jint)(arg1)->MonitorExit(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStringRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, unsigned short* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jchar *arg5 = (jchar *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetStringRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStringUTFRegion___(void * jarg1, void * jarg2, long jarg3, long jarg4, char * jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->GetStringUTFRegion(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_GetPrimitiveArrayCritical___(void * jarg1, void * jarg2, unsigned int * jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jarray arg2 = (jarray) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  void *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jarray)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (void *)(arg1)->GetPrimitiveArrayCritical(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_ReleasePrimitiveArrayCritical___(void * jarg1, void * jarg2, void * jarg3, long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jarray arg2 = (jarray) 0 ;
  void *arg3 = (void *) 0 ;
  jint arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jarray)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (jint)jarg4; 
  (arg1)->ReleasePrimitiveArrayCritical(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_GetStringCritical___(void * jarg1, void * jarg2, unsigned int * jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  jchar *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (jchar *)(arg1)->GetStringCritical(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_ReleaseStringCritical___(void * jarg1, void * jarg2, void * jarg3) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jchar *arg3 = (jchar *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (jchar *)jarg3; 
  (arg1)->ReleaseStringCritical(arg2,(jchar const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewWeakGlobalRef___(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jweak result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jweak)(arg1)->NewWeakGlobalRef(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JNIEnv_DeleteWeakGlobalRef___(void * jarg1, void * jarg2) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jweak arg2 = (jweak) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jweak)jarg2; 
  (arg1)->DeleteWeakGlobalRef(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JNIEnv_ExceptionCheck___(void * jarg1) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  result = (jboolean)(arg1)->ExceptionCheck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_NewDirectByteBuffer___(void * jarg1, void * jarg2, long long jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  void *arg2 = (void *) 0 ;
  jlong arg3 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (jlong)jarg3; 
  result = (jobject)(arg1)->NewDirectByteBuffer(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JNIEnv_GetDirectBufferAddress___(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  void *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (void *)(arg1)->GetDirectBufferAddress(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_esfjni_JNIEnv_GetDirectBufferCapacity___(void * jarg1, void * jarg2) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (arg1)->GetDirectBufferCapacity(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNIEnv_GetObjectRefType___(void * jarg1, void * jarg2) {
  int jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jobjectRefType result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jobjectRefType)(arg1)->GetObjectRefType(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JNIEnv___() {
  void * jresult ;
  JNIEnv_ *result = 0 ;
  
  result = (JNIEnv_ *)new JNIEnv_();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JNIEnv___(void * jarg1) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JavaVMOption_optionString_set___(void * jarg1, char * jarg2) {
  JavaVMOption *arg1 = (JavaVMOption *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (JavaVMOption *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->optionString;
    if (arg2) {
      arg1->optionString = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->optionString, (const char *)arg2);
    } else {
      arg1->optionString = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_esfjni_JavaVMOption_optionString_get___(void * jarg1) {
  char * jresult ;
  JavaVMOption *arg1 = (JavaVMOption *) 0 ;
  char *result = 0 ;
  
  arg1 = (JavaVMOption *)jarg1; 
  result = (char *) ((arg1)->optionString);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JavaVMOption___() {
  void * jresult ;
  JavaVMOption *result = 0 ;
  
  result = (JavaVMOption *)new JavaVMOption();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JavaVMOption___(void * jarg1) {
  JavaVMOption *arg1 = (JavaVMOption *) 0 ;
  
  arg1 = (JavaVMOption *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_version_set___(void * jarg1, long jarg2) {
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  jint arg2 ;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  arg2 = (jint)jarg2; 
  if (arg1) (arg1)->version = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_version_get___(void * jarg1) {
  long jresult ;
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  jint result;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  result = (jint) ((arg1)->version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_nOptions_set___(void * jarg1, long jarg2) {
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  jint arg2 ;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  arg2 = (jint)jarg2; 
  if (arg1) (arg1)->nOptions = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_nOptions_get___(void * jarg1) {
  long jresult ;
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  jint result;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  result = (jint) ((arg1)->nOptions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_options_set___(void * jarg1, void * jarg2) {
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  JavaVMOption *arg2 = (JavaVMOption *) 0 ;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  arg2 = (JavaVMOption *)jarg2; 
  if (arg1) (arg1)->options = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_options_get___(void * jarg1) {
  void * jresult ;
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  JavaVMOption *result = 0 ;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  result = (JavaVMOption *) ((arg1)->options);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_ignoreUnrecognized_set___(void * jarg1, unsigned char jarg2) {
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  jboolean arg2 ;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  arg2 = (jboolean)jarg2; 
  if (arg1) (arg1)->ignoreUnrecognized = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_ignoreUnrecognized_get___(void * jarg1) {
  unsigned char jresult ;
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  jboolean result;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  result = (jboolean) ((arg1)->ignoreUnrecognized);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_create__SWIG_0___(long jarg1) {
  void * jresult ;
  jint arg1 ;
  JavaVMInitArgs *result = 0 ;
  
  arg1 = (jint)jarg1; 
  result = (JavaVMInitArgs *)JavaVMInitArgs_create__SWIG_0(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_create__SWIG_1___(long jarg1, long jarg2) {
  void * jresult ;
  jint arg1 ;
  jint arg2 ;
  JavaVMInitArgs *result = 0 ;
  
  arg1 = (jint)jarg1; 
  arg2 = (jint)jarg2; 
  result = (JavaVMInitArgs *)JavaVMInitArgs_create__SWIG_1(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_getOptions___(void * jarg1) {
  long jresult ;
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  jint result;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  result = (jint)JavaVMInitArgs_getOptions(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_setOptions___(void * jarg1, long jarg2) {
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  jint arg2 ;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  arg2 = (jint)jarg2; 
  JavaVMInitArgs_setOptions(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_get___(void * jarg1, long jarg2) {
  void * jresult ;
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  jint arg2 ;
  JavaVMOption result;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  arg2 = (jint)jarg2; 
  result = JavaVMInitArgs_get(arg1,arg2);
  jresult = new JavaVMOption((const JavaVMOption &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_set___(void * jarg1, long jarg2, void * jarg3) {
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  jint arg2 ;
  JavaVMOption arg3 ;
  JavaVMOption *argp3 ;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  arg2 = (jint)jarg2; 
  argp3 = (JavaVMOption *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null JavaVMOption", 0);
    return ;
  }
  arg3 = *argp3; 
  JavaVMInitArgs_set(arg1,arg2,arg3);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_isIgnoreUnrecognized___(void * jarg1) {
  unsigned char jresult ;
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  jboolean result;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  result = (jboolean)JavaVMInitArgs_isIgnoreUnrecognized(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JavaVMInitArgs_setIgnoreUnrecognized___(void * jarg1, unsigned char jarg2) {
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  jboolean arg2 ;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  arg2 = (jboolean)jarg2; 
  JavaVMInitArgs_setIgnoreUnrecognized(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JavaVMInitArgs___(void * jarg1) {
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JavaVMAttachArgs_version_set___(void * jarg1, long jarg2) {
  JavaVMAttachArgs *arg1 = (JavaVMAttachArgs *) 0 ;
  jint arg2 ;
  
  arg1 = (JavaVMAttachArgs *)jarg1; 
  arg2 = (jint)jarg2; 
  if (arg1) (arg1)->version = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JavaVMAttachArgs_version_get___(void * jarg1) {
  long jresult ;
  JavaVMAttachArgs *arg1 = (JavaVMAttachArgs *) 0 ;
  jint result;
  
  arg1 = (JavaVMAttachArgs *)jarg1; 
  result = (jint) ((arg1)->version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JavaVMAttachArgs_name_set___(void * jarg1, char * jarg2) {
  JavaVMAttachArgs *arg1 = (JavaVMAttachArgs *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (JavaVMAttachArgs *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_esfjni_JavaVMAttachArgs_name_get___(void * jarg1) {
  char * jresult ;
  JavaVMAttachArgs *arg1 = (JavaVMAttachArgs *) 0 ;
  char *result = 0 ;
  
  arg1 = (JavaVMAttachArgs *)jarg1; 
  result = (char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_JavaVMAttachArgs_group_set___(void * jarg1, void * jarg2) {
  JavaVMAttachArgs *arg1 = (JavaVMAttachArgs *) 0 ;
  jobject arg2 = (jobject) 0 ;
  
  arg1 = (JavaVMAttachArgs *)jarg1; 
  arg2 = (jobject)jarg2; 
  if (arg1) (arg1)->group = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_JavaVMAttachArgs_group_get___(void * jarg1) {
  void * jresult ;
  JavaVMAttachArgs *arg1 = (JavaVMAttachArgs *) 0 ;
  jobject result;
  
  arg1 = (JavaVMAttachArgs *)jarg1; 
  result = (jobject) ((arg1)->group);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JavaVMAttachArgs___() {
  void * jresult ;
  JavaVMAttachArgs *result = 0 ;
  
  result = (JavaVMAttachArgs *)new JavaVMAttachArgs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JavaVMAttachArgs___(void * jarg1) {
  JavaVMAttachArgs *arg1 = (JavaVMAttachArgs *) 0 ;
  
  arg1 = (JavaVMAttachArgs *)jarg1; 
  delete arg1;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JavaVM_DestroyJavaVM___(void * jarg1) {
  long jresult ;
  JavaVM_ *arg1 = (JavaVM_ *) 0 ;
  jint result;
  
  arg1 = (JavaVM_ *)jarg1; 
  result = (jint)(arg1)->DestroyJavaVM();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JavaVM_DetachCurrentThread___(void * jarg1) {
  long jresult ;
  JavaVM_ *arg1 = (JavaVM_ *) 0 ;
  jint result;
  
  arg1 = (JavaVM_ *)jarg1; 
  result = (jint)(arg1)->DetachCurrentThread();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JavaVM_GetDefaultJavaVMInitArgs___(void * jarg1) {
  long jresult ;
  JavaVMInitArgs *arg1 = (JavaVMInitArgs *) 0 ;
  jint result;
  
  arg1 = (JavaVMInitArgs *)jarg1; 
  result = (jint)JavaVM__GetDefaultJavaVMInitArgs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JavaVM_CreateJavaVM___(void * jarg1, void * jarg2, void * jarg3) {
  long jresult ;
  Ref< JavaVM > *arg1 = (Ref< JavaVM > *) 0 ;
  Ref< JNIEnv > *arg2 = (Ref< JNIEnv > *) 0 ;
  JavaVMInitArgs *arg3 = (JavaVMInitArgs *) 0 ;
  jint result;
  
  arg1 = (Ref< JavaVM > *)jarg1; 
  arg2 = (Ref< JNIEnv > *)jarg2; 
  arg3 = (JavaVMInitArgs *)jarg3; 
  result = (jint)JavaVM__CreateJavaVM(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_esfjni_JavaVM_GetCreatedJavaVMs___(void * jarg1) {
  long jresult ;
  Buffer< JavaVM > *arg1 = (Buffer< JavaVM > *) 0 ;
  jint result;
  
  arg1 = (Buffer< JavaVM > *)jarg1; 
  result = (jint)JavaVM__GetCreatedJavaVMs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_esfjni_new_JavaVM___() {
  void * jresult ;
  JavaVM_ *result = 0 ;
  
  result = (JavaVM_ *)new JavaVM_();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_esfjni_delete_JavaVM___(void * jarg1) {
  JavaVM_ *arg1 = (JavaVM_ *) 0 ;
  
  arg1 = (JavaVM_ *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_VERSION_1_1_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x00010001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_VERSION_1_2_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x00010002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_VERSION_1_4_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x00010004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_VERSION_1_6_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x00010006);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_esfjni_JNI_VERSION_1_8_get___() {
  int jresult ;
  int result;
  
  result = (int)(0x00010008);
  jresult = result; 
  return jresult;
}


SWIGEXPORT _jobject * SWIGSTDCALL CSharp_esfjni_JClass_SWIGUpcast___(_jclass *jarg1) {
    return (_jobject *)jarg1;
}

SWIGEXPORT _jobject * SWIGSTDCALL CSharp_esfjni_JThrowable_SWIGUpcast___(_jthrowable *jarg1) {
    return (_jobject *)jarg1;
}

SWIGEXPORT _jobject * SWIGSTDCALL CSharp_esfjni_JString_SWIGUpcast___(_jstring *jarg1) {
    return (_jobject *)jarg1;
}

SWIGEXPORT _jobject * SWIGSTDCALL CSharp_esfjni_JArray_SWIGUpcast___(_jarray *jarg1) {
    return (_jobject *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_esfjni_JBooleanArray_SWIGUpcast___(_jbooleanArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_esfjni_JByteArray_SWIGUpcast___(_jbyteArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_esfjni_JCharArray_SWIGUpcast___(_jcharArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_esfjni_JShortArray_SWIGUpcast___(_jshortArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_esfjni_JIntArray_SWIGUpcast___(_jintArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_esfjni_JLongArray_SWIGUpcast___(_jlongArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_esfjni_JFloatArray_SWIGUpcast___(_jfloatArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_esfjni_JDoubleArray_SWIGUpcast___(_jdoubleArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_esfjni_JObjectArray_SWIGUpcast___(_jobjectArray *jarg1) {
    return (_jarray *)jarg1;
}

#ifdef __cplusplus
}
#endif

