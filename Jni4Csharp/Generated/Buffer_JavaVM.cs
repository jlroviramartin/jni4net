//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace es.jni {

public class Buffer_JavaVM : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Buffer_JavaVM(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Buffer_JavaVM obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Buffer_JavaVM() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          JNIPINVOKE.delete_Buffer_JavaVM(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Buffer_JavaVM(int bufferLength) : this(JNIPINVOKE.new_Buffer_JavaVM(bufferLength), true) {
  }

  public JavaVM get(int i) {
    global::System.IntPtr cPtr = JNIPINVOKE.Buffer_JavaVM_get(swigCPtr, i);
    JavaVM ret = (cPtr == global::System.IntPtr.Zero) ? null : new JavaVM(cPtr, false);
    return ret;
  }

  public int getBufferLength() {
    int ret = JNIPINVOKE.Buffer_JavaVM_getBufferLength(swigCPtr);
    return ret;
  }

  public int getLength() {
    int ret = JNIPINVOKE.Buffer_JavaVM_getLength(swigCPtr);
    return ret;
  }

}

}
