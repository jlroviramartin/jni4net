//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace es.jni {

public unsafe class JNIEnv : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal JNIEnv(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(JNIEnv obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~JNIEnv() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          JNIPINVOKE.delete_JNIEnv(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int GetVersion() {
    int ret = JNIPINVOKE.JNIEnv_GetVersion(swigCPtr);
    return ret;
  }

  public JClass DefineClass(string name, JObject loader, sbyte[] buf, int len) {
    fixed ( sbyte* swig_ptrTo_buf = buf ) {
    {
      global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_DefineClass(swigCPtr, name, JObject.getCPtr(loader), (global::System.IntPtr)swig_ptrTo_buf, len);
      JClass ret = (cPtr == global::System.IntPtr.Zero) ? null : new JClass(cPtr, false);
      return ret;
    }
    }
  }

  public JClass FindClass(string name) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_FindClass(swigCPtr, name);
    JClass ret = (cPtr == global::System.IntPtr.Zero) ? null : new JClass(cPtr, false);
    return ret;
  }

  public JMethodID FromReflectedMethod(JObject method) {
    JMethodID ret = new JMethodID(JNIPINVOKE.JNIEnv_FromReflectedMethod(swigCPtr, JObject.getCPtr(method)), true);
    return ret;
  }

  public JFieldID FromReflectedField(JObject field) {
    JFieldID ret = new JFieldID(JNIPINVOKE.JNIEnv_FromReflectedField(swigCPtr, JObject.getCPtr(field)), true);
    return ret;
  }

  public JObject ToReflectedMethod(JClass cls, JMethodID methodID, /* cstype jboolean */ bool isStatic) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_ToReflectedMethod(swigCPtr, JClass.getCPtr(cls), JMethodID.getCPtr(methodID), /* csin jboolean */ isStatic);
    JObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new JObject(cPtr, false);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public JClass GetSuperclass(JClass sub) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_GetSuperclass(swigCPtr, JClass.getCPtr(sub));
    JClass ret = (cPtr == global::System.IntPtr.Zero) ? null : new JClass(cPtr, false);
    return ret;
  }

  public /* cstype jboolean */ bool IsAssignableFrom(JClass sub, JClass sup)  {
    // csout jboolean
    bool ret = JNIPINVOKE.JNIEnv_IsAssignableFrom(swigCPtr, JClass.getCPtr(sub), JClass.getCPtr(sup));
    return ret;
  } 

  public JObject ToReflectedField(JClass cls, JFieldID fieldID, /* cstype jboolean */ bool isStatic) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_ToReflectedField(swigCPtr, JClass.getCPtr(cls), JFieldID.getCPtr(fieldID), /* csin jboolean */ isStatic);
    JObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new JObject(cPtr, false);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Throw(JThrowable obj) {
    int ret = JNIPINVOKE.JNIEnv_Throw(swigCPtr, JThrowable.getCPtr(obj));
    return ret;
  }

  public int ThrowNew(JClass clazz, string msg) {
    int ret = JNIPINVOKE.JNIEnv_ThrowNew(swigCPtr, JClass.getCPtr(clazz), msg);
    return ret;
  }

  public JThrowable ExceptionOccurred() {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_ExceptionOccurred(swigCPtr);
    JThrowable ret = (cPtr == global::System.IntPtr.Zero) ? null : new JThrowable(cPtr, false);
    return ret;
  }

  public void ExceptionDescribe() {
    JNIPINVOKE.JNIEnv_ExceptionDescribe(swigCPtr);
  }

  public void ExceptionClear() {
    JNIPINVOKE.JNIEnv_ExceptionClear(swigCPtr);
  }

  public void FatalError(string msg) {
    JNIPINVOKE.JNIEnv_FatalError(swigCPtr, msg);
  }

  public int PushLocalFrame(int capacity) {
    int ret = JNIPINVOKE.JNIEnv_PushLocalFrame(swigCPtr, capacity);
    return ret;
  }

  public JObject PopLocalFrame(JObject result) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_PopLocalFrame(swigCPtr, JObject.getCPtr(result));
    JObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new JObject(cPtr, false);
    return ret;
  }

  public JObject NewGlobalRef(JObject lobj) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_NewGlobalRef(swigCPtr, JObject.getCPtr(lobj));
    JObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new JObject(cPtr, false);
    return ret;
  }

  public void DeleteGlobalRef(JObject gref) {
    JNIPINVOKE.JNIEnv_DeleteGlobalRef(swigCPtr, JObject.getCPtr(gref));
  }

  public void DeleteLocalRef(JObject obj) {
    JNIPINVOKE.JNIEnv_DeleteLocalRef(swigCPtr, JObject.getCPtr(obj));
  }

  public /* cstype jboolean */ bool IsSameObject(JObject obj1, JObject obj2)  {
    // csout jboolean
    bool ret = JNIPINVOKE.JNIEnv_IsSameObject(swigCPtr, JObject.getCPtr(obj1), JObject.getCPtr(obj2));
    return ret;
  } 

  public JObject NewLocalRef(JObject ref_) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_NewLocalRef(swigCPtr, JObject.getCPtr(ref_));
    JObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new JObject(cPtr, false);
    return ret;
  }

  public int EnsureLocalCapacity(int capacity) {
    int ret = JNIPINVOKE.JNIEnv_EnsureLocalCapacity(swigCPtr, capacity);
    return ret;
  }

  public JObject AllocObject(JClass clazz) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_AllocObject(swigCPtr, JClass.getCPtr(clazz));
    JObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new JObject(cPtr, false);
    return ret;
  }

  public JObject NewObject(JClass clazz, JMethodID methodID, JValue[] args) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_NewObject(swigCPtr, JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    JObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new JObject(cPtr, false);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public JClass GetObjectClass(JObject obj) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_GetObjectClass(swigCPtr, JObject.getCPtr(obj));
    JClass ret = (cPtr == global::System.IntPtr.Zero) ? null : new JClass(cPtr, false);
    return ret;
  }

  public /* cstype jboolean */ bool IsInstanceOf(JObject obj, JClass clazz)  {
    // csout jboolean
    bool ret = JNIPINVOKE.JNIEnv_IsInstanceOf(swigCPtr, JObject.getCPtr(obj), JClass.getCPtr(clazz));
    return ret;
  } 

  public JMethodID GetMethodID(JClass clazz, string name, string sig) {
    JMethodID ret = new JMethodID(JNIPINVOKE.JNIEnv_GetMethodID(swigCPtr, JClass.getCPtr(clazz), name, sig), true);
    return ret;
  }

  public JObject CallObjectMethod(JObject obj, JMethodID methodID, JValue[] args) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_CallObjectMethod(swigCPtr, JObject.getCPtr(obj), JMethodID.getCPtr(methodID), args);
    JObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new JObject(cPtr, false);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public /* cstype jboolean */ bool CallBooleanMethod(JObject obj, JMethodID methodID, JValue[] args)  {
    // csout jboolean
    bool ret = JNIPINVOKE.JNIEnv_CallBooleanMethod(swigCPtr, JObject.getCPtr(obj), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  } 

  public sbyte CallByteMethod(JObject obj, JMethodID methodID, JValue[] args) {
    sbyte ret = JNIPINVOKE.JNIEnv_CallByteMethod(swigCPtr, JObject.getCPtr(obj), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public /* cstype jchar */ char CallCharMethod(JObject obj, JMethodID methodID, JValue[] args)  {
    // csout jchar
    char ret = JNIPINVOKE.JNIEnv_CallCharMethod(swigCPtr, JObject.getCPtr(obj), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  } 

  public short CallShortMethod(JObject obj, JMethodID methodID, JValue[] args) {
    short ret = JNIPINVOKE.JNIEnv_CallShortMethod(swigCPtr, JObject.getCPtr(obj), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int CallIntMethod(JObject obj, JMethodID methodID, JValue[] args) {
    int ret = JNIPINVOKE.JNIEnv_CallIntMethod(swigCPtr, JObject.getCPtr(obj), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long CallLongMethod(JObject obj, JMethodID methodID, JValue[] args) {
    long ret = JNIPINVOKE.JNIEnv_CallLongMethod(swigCPtr, JObject.getCPtr(obj), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float CallFloatMethod(JObject obj, JMethodID methodID, JValue[] args) {
    float ret = JNIPINVOKE.JNIEnv_CallFloatMethod(swigCPtr, JObject.getCPtr(obj), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double CallDoubleMethod(JObject obj, JMethodID methodID, JValue[] args) {
    double ret = JNIPINVOKE.JNIEnv_CallDoubleMethod(swigCPtr, JObject.getCPtr(obj), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void CallVoidMethod(JObject obj, JMethodID methodID, JValue[] args) {
    JNIPINVOKE.JNIEnv_CallVoidMethod(swigCPtr, JObject.getCPtr(obj), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public JObject CallNonvirtualObjectMethod(JObject obj, JClass clazz, JMethodID methodID, JValue[] args) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_CallNonvirtualObjectMethod(swigCPtr, JObject.getCPtr(obj), JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    JObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new JObject(cPtr, false);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public /* cstype jboolean */ bool CallNonvirtualBooleanMethod(JObject obj, JClass clazz, JMethodID methodID, JValue[] args)  {
    // csout jboolean
    bool ret = JNIPINVOKE.JNIEnv_CallNonvirtualBooleanMethod(swigCPtr, JObject.getCPtr(obj), JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  } 

  public sbyte CallNonvirtualByteMethod(JObject obj, JClass clazz, JMethodID methodID, JValue[] args) {
    sbyte ret = JNIPINVOKE.JNIEnv_CallNonvirtualByteMethod(swigCPtr, JObject.getCPtr(obj), JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public /* cstype jchar */ char CallNonvirtualCharMethod(JObject obj, JClass clazz, JMethodID methodID, JValue[] args)  {
    // csout jchar
    char ret = JNIPINVOKE.JNIEnv_CallNonvirtualCharMethod(swigCPtr, JObject.getCPtr(obj), JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  } 

  public short CallNonvirtualShortMethod(JObject obj, JClass clazz, JMethodID methodID, JValue[] args) {
    short ret = JNIPINVOKE.JNIEnv_CallNonvirtualShortMethod(swigCPtr, JObject.getCPtr(obj), JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int CallNonvirtualIntMethod(JObject obj, JClass clazz, JMethodID methodID, JValue[] args) {
    int ret = JNIPINVOKE.JNIEnv_CallNonvirtualIntMethod(swigCPtr, JObject.getCPtr(obj), JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long CallNonvirtualLongMethod(JObject obj, JClass clazz, JMethodID methodID, JValue[] args) {
    long ret = JNIPINVOKE.JNIEnv_CallNonvirtualLongMethod(swigCPtr, JObject.getCPtr(obj), JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float CallNonvirtualFloatMethod(JObject obj, JClass clazz, JMethodID methodID, JValue[] args) {
    float ret = JNIPINVOKE.JNIEnv_CallNonvirtualFloatMethod(swigCPtr, JObject.getCPtr(obj), JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double CallNonvirtualDoubleMethod(JObject obj, JClass clazz, JMethodID methodID, JValue[] args) {
    double ret = JNIPINVOKE.JNIEnv_CallNonvirtualDoubleMethod(swigCPtr, JObject.getCPtr(obj), JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void CallNonvirtualVoidMethod(JObject obj, JClass clazz, JMethodID methodID, JValue[] args) {
    JNIPINVOKE.JNIEnv_CallNonvirtualVoidMethod(swigCPtr, JObject.getCPtr(obj), JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public JFieldID GetFieldID(JClass clazz, string name, string sig) {
    JFieldID ret = new JFieldID(JNIPINVOKE.JNIEnv_GetFieldID(swigCPtr, JClass.getCPtr(clazz), name, sig), true);
    return ret;
  }

  public JObject GetObjectField(JObject obj, JFieldID fieldID) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_GetObjectField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID));
    JObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new JObject(cPtr, false);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public /* cstype jboolean */ bool GetBooleanField(JObject obj, JFieldID fieldID)  {
    // csout jboolean
    bool ret = JNIPINVOKE.JNIEnv_GetBooleanField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  } 

  public sbyte GetByteField(JObject obj, JFieldID fieldID) {
    sbyte ret = JNIPINVOKE.JNIEnv_GetByteField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public /* cstype jchar */ char GetCharField(JObject obj, JFieldID fieldID)  {
    // csout jchar
    char ret = JNIPINVOKE.JNIEnv_GetCharField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  } 

  public short GetShortField(JObject obj, JFieldID fieldID) {
    short ret = JNIPINVOKE.JNIEnv_GetShortField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetIntField(JObject obj, JFieldID fieldID) {
    int ret = JNIPINVOKE.JNIEnv_GetIntField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long GetLongField(JObject obj, JFieldID fieldID) {
    long ret = JNIPINVOKE.JNIEnv_GetLongField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetFloatField(JObject obj, JFieldID fieldID) {
    float ret = JNIPINVOKE.JNIEnv_GetFloatField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetDoubleField(JObject obj, JFieldID fieldID) {
    double ret = JNIPINVOKE.JNIEnv_GetDoubleField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetObjectField(JObject obj, JFieldID fieldID, JObject val) {
    JNIPINVOKE.JNIEnv_SetObjectField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID), JObject.getCPtr(val));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBooleanField(JObject obj, JFieldID fieldID, /* cstype jboolean */ bool val) {
    JNIPINVOKE.JNIEnv_SetBooleanField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID), /* csin jboolean */ val);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetByteField(JObject obj, JFieldID fieldID, sbyte val) {
    JNIPINVOKE.JNIEnv_SetByteField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID), val);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCharField(JObject obj, JFieldID fieldID, /* cstype jchar */ char val) {
    JNIPINVOKE.JNIEnv_SetCharField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID), /* csin jchar */ val);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetShortField(JObject obj, JFieldID fieldID, short val) {
    JNIPINVOKE.JNIEnv_SetShortField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID), val);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetIntField(JObject obj, JFieldID fieldID, int val) {
    JNIPINVOKE.JNIEnv_SetIntField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID), val);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLongField(JObject obj, JFieldID fieldID, long val) {
    JNIPINVOKE.JNIEnv_SetLongField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID), val);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFloatField(JObject obj, JFieldID fieldID, float val) {
    JNIPINVOKE.JNIEnv_SetFloatField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID), val);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDoubleField(JObject obj, JFieldID fieldID, double val) {
    JNIPINVOKE.JNIEnv_SetDoubleField(swigCPtr, JObject.getCPtr(obj), JFieldID.getCPtr(fieldID), val);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public JMethodID GetStaticMethodID(JClass clazz, string name, string sig) {
    JMethodID ret = new JMethodID(JNIPINVOKE.JNIEnv_GetStaticMethodID(swigCPtr, JClass.getCPtr(clazz), name, sig), true);
    return ret;
  }

  public JObject CallStaticObjectMethod(JClass clazz, JMethodID methodID, JValue[] args) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_CallStaticObjectMethod(swigCPtr, JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    JObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new JObject(cPtr, false);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public /* cstype jboolean */ bool CallStaticBooleanMethod(JClass clazz, JMethodID methodID, JValue[] args)  {
    // csout jboolean
    bool ret = JNIPINVOKE.JNIEnv_CallStaticBooleanMethod(swigCPtr, JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  } 

  public sbyte CallStaticByteMethod(JClass clazz, JMethodID methodID, JValue[] args) {
    sbyte ret = JNIPINVOKE.JNIEnv_CallStaticByteMethod(swigCPtr, JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public /* cstype jchar */ char CallStaticCharMethod(JClass clazz, JMethodID methodID, JValue[] args)  {
    // csout jchar
    char ret = JNIPINVOKE.JNIEnv_CallStaticCharMethod(swigCPtr, JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  } 

  public short CallStaticShortMethod(JClass clazz, JMethodID methodID, JValue[] args) {
    short ret = JNIPINVOKE.JNIEnv_CallStaticShortMethod(swigCPtr, JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int CallStaticIntMethod(JClass clazz, JMethodID methodID, JValue[] args) {
    int ret = JNIPINVOKE.JNIEnv_CallStaticIntMethod(swigCPtr, JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long CallStaticLongMethod(JClass clazz, JMethodID methodID, JValue[] args) {
    long ret = JNIPINVOKE.JNIEnv_CallStaticLongMethod(swigCPtr, JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float CallStaticFloatMethod(JClass clazz, JMethodID methodID, JValue[] args) {
    float ret = JNIPINVOKE.JNIEnv_CallStaticFloatMethod(swigCPtr, JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double CallStaticDoubleMethod(JClass clazz, JMethodID methodID, JValue[] args) {
    double ret = JNIPINVOKE.JNIEnv_CallStaticDoubleMethod(swigCPtr, JClass.getCPtr(clazz), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void CallStaticVoidMethod(JClass cls, JMethodID methodID, JValue[] args) {
    JNIPINVOKE.JNIEnv_CallStaticVoidMethod(swigCPtr, JClass.getCPtr(cls), JMethodID.getCPtr(methodID), args);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public JFieldID GetStaticFieldID(JClass clazz, string name, string sig) {
    JFieldID ret = new JFieldID(JNIPINVOKE.JNIEnv_GetStaticFieldID(swigCPtr, JClass.getCPtr(clazz), name, sig), true);
    return ret;
  }

  public JObject GetStaticObjectField(JClass clazz, JFieldID fieldID) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_GetStaticObjectField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID));
    JObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new JObject(cPtr, false);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public /* cstype jboolean */ bool GetStaticBooleanField(JClass clazz, JFieldID fieldID)  {
    // csout jboolean
    bool ret = JNIPINVOKE.JNIEnv_GetStaticBooleanField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  } 

  public sbyte GetStaticByteField(JClass clazz, JFieldID fieldID) {
    sbyte ret = JNIPINVOKE.JNIEnv_GetStaticByteField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public /* cstype jchar */ char GetStaticCharField(JClass clazz, JFieldID fieldID)  {
    // csout jchar
    char ret = JNIPINVOKE.JNIEnv_GetStaticCharField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  } 

  public short GetStaticShortField(JClass clazz, JFieldID fieldID) {
    short ret = JNIPINVOKE.JNIEnv_GetStaticShortField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetStaticIntField(JClass clazz, JFieldID fieldID) {
    int ret = JNIPINVOKE.JNIEnv_GetStaticIntField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public long GetStaticLongField(JClass clazz, JFieldID fieldID) {
    long ret = JNIPINVOKE.JNIEnv_GetStaticLongField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetStaticFloatField(JClass clazz, JFieldID fieldID) {
    float ret = JNIPINVOKE.JNIEnv_GetStaticFloatField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetStaticDoubleField(JClass clazz, JFieldID fieldID) {
    double ret = JNIPINVOKE.JNIEnv_GetStaticDoubleField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStaticObjectField(JClass clazz, JFieldID fieldID, JObject value) {
    JNIPINVOKE.JNIEnv_SetStaticObjectField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID), JObject.getCPtr(value));
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStaticBooleanField(JClass clazz, JFieldID fieldID, /* cstype jboolean */ bool value) {
    JNIPINVOKE.JNIEnv_SetStaticBooleanField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID), /* csin jboolean */ value);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStaticByteField(JClass clazz, JFieldID fieldID, sbyte value) {
    JNIPINVOKE.JNIEnv_SetStaticByteField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID), value);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStaticCharField(JClass clazz, JFieldID fieldID, /* cstype jchar */ char value) {
    JNIPINVOKE.JNIEnv_SetStaticCharField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID), /* csin jchar */ value);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStaticShortField(JClass clazz, JFieldID fieldID, short value) {
    JNIPINVOKE.JNIEnv_SetStaticShortField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID), value);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStaticIntField(JClass clazz, JFieldID fieldID, int value) {
    JNIPINVOKE.JNIEnv_SetStaticIntField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID), value);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStaticLongField(JClass clazz, JFieldID fieldID, long value) {
    JNIPINVOKE.JNIEnv_SetStaticLongField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID), value);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStaticFloatField(JClass clazz, JFieldID fieldID, float value) {
    JNIPINVOKE.JNIEnv_SetStaticFloatField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID), value);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStaticDoubleField(JClass clazz, JFieldID fieldID, double value) {
    JNIPINVOKE.JNIEnv_SetStaticDoubleField(swigCPtr, JClass.getCPtr(clazz), JFieldID.getCPtr(fieldID), value);
    if (JNIPINVOKE.SWIGPendingException.Pending) throw JNIPINVOKE.SWIGPendingException.Retrieve();
  }

  public JString NewString(SWIGTYPE_p_unsigned_short unicode, int len) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_NewString(swigCPtr, SWIGTYPE_p_unsigned_short.getCPtr(unicode), len);
    JString ret = (cPtr == global::System.IntPtr.Zero) ? null : new JString(cPtr, false);
    return ret;
  }

  public int GetStringLength(JString str) {
    int ret = JNIPINVOKE.JNIEnv_GetStringLength(swigCPtr, JString.getCPtr(str));
    return ret;
  }

  public JString NewStringUTF(string utf) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_NewStringUTF(swigCPtr, utf);
    JString ret = (cPtr == global::System.IntPtr.Zero) ? null : new JString(cPtr, false);
    return ret;
  }

  public int GetStringUTFLength(JString str) {
    int ret = JNIPINVOKE.JNIEnv_GetStringUTFLength(swigCPtr, JString.getCPtr(str));
    return ret;
  }

  public string GetStringUTFChars(JString str, ref bool isCopy) {
    string ret = JNIPINVOKE.JNIEnv_GetStringUTFChars(swigCPtr, JString.getCPtr(str), ref isCopy);
    return ret;
  }

  public void ReleaseStringUTFChars(JString str, string chars) {
    JNIPINVOKE.JNIEnv_ReleaseStringUTFChars(swigCPtr, JString.getCPtr(str), chars);
  }

  public int GetArrayLength(JArray array) {
    int ret = JNIPINVOKE.JNIEnv_GetArrayLength(swigCPtr, JArray.getCPtr(array));
    return ret;
  }

  public JObjectArray NewObjectArray(int len, JClass clazz, JObject init) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_NewObjectArray(swigCPtr, len, JClass.getCPtr(clazz), JObject.getCPtr(init));
    JObjectArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new JObjectArray(cPtr, false);
    return ret;
  }

  public JObject GetObjectArrayElement(JObjectArray array, int index) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_GetObjectArrayElement(swigCPtr, JObjectArray.getCPtr(array), index);
    JObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new JObject(cPtr, false);
    return ret;
  }

  public void SetObjectArrayElement(JObjectArray array, int index, JObject val) {
    JNIPINVOKE.JNIEnv_SetObjectArrayElement(swigCPtr, JObjectArray.getCPtr(array), index, JObject.getCPtr(val));
  }

  public JBooleanArray NewBooleanArray(int len) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_NewBooleanArray(swigCPtr, len);
    JBooleanArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new JBooleanArray(cPtr, false);
    return ret;
  }

  public JByteArray NewByteArray(int len) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_NewByteArray(swigCPtr, len);
    JByteArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new JByteArray(cPtr, false);
    return ret;
  }

  public JCharArray NewCharArray(int len) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_NewCharArray(swigCPtr, len);
    JCharArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new JCharArray(cPtr, false);
    return ret;
  }

  public JShortArray NewShortArray(int len) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_NewShortArray(swigCPtr, len);
    JShortArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new JShortArray(cPtr, false);
    return ret;
  }

  public JIntArray NewIntArray(int len) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_NewIntArray(swigCPtr, len);
    JIntArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new JIntArray(cPtr, false);
    return ret;
  }

  public JLongArray NewLongArray(int len) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_NewLongArray(swigCPtr, len);
    JLongArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new JLongArray(cPtr, false);
    return ret;
  }

  public JFloatArray NewFloatArray(int len) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_NewFloatArray(swigCPtr, len);
    JFloatArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new JFloatArray(cPtr, false);
    return ret;
  }

  public JDoubleArray NewDoubleArray(int len) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_NewDoubleArray(swigCPtr, len);
    JDoubleArray ret = (cPtr == global::System.IntPtr.Zero) ? null : new JDoubleArray(cPtr, false);
    return ret;
  }

  public void GetBooleanArrayRegion(JBooleanArray array, int start, int len, bool[] buf) {
    fixed ( bool* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_GetBooleanArrayRegion(swigCPtr, JBooleanArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void GetByteArrayRegion(JByteArray array, int start, int len, sbyte[] buf) {
    fixed ( sbyte* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_GetByteArrayRegion(swigCPtr, JByteArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void GetCharArrayRegion(JCharArray array, int start, int len, char[] buf) {
    fixed ( char* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_GetCharArrayRegion(swigCPtr, JCharArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void GetShortArrayRegion(JShortArray array, int start, int len, short[] buf) {
    fixed ( short* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_GetShortArrayRegion(swigCPtr, JShortArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void GetIntArrayRegion(JIntArray array, int start, int len, int[] buf) {
    fixed ( int* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_GetIntArrayRegion(swigCPtr, JIntArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void GetLongArrayRegion(JLongArray array, int start, int len, long[] buf) {
    fixed ( long* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_GetLongArrayRegion(swigCPtr, JLongArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void GetFloatArrayRegion(JFloatArray array, int start, int len, float[] buf) {
    fixed ( float* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_GetFloatArrayRegion(swigCPtr, JFloatArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void GetDoubleArrayRegion(JDoubleArray array, int start, int len, double[] buf) {
    fixed ( double* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_GetDoubleArrayRegion(swigCPtr, JDoubleArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void SetBooleanArrayRegion(JBooleanArray array, int start, int len, bool[] buf) {
    fixed ( bool* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_SetBooleanArrayRegion(swigCPtr, JBooleanArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void SetByteArrayRegion(JByteArray array, int start, int len, sbyte[] buf) {
    fixed ( sbyte* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_SetByteArrayRegion(swigCPtr, JByteArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void SetCharArrayRegion(JCharArray array, int start, int len, char[] buf) {
    fixed ( char* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_SetCharArrayRegion(swigCPtr, JCharArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void SetShortArrayRegion(JShortArray array, int start, int len, short[] buf) {
    fixed ( short* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_SetShortArrayRegion(swigCPtr, JShortArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void SetIntArrayRegion(JIntArray array, int start, int len, int[] buf) {
    fixed ( int* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_SetIntArrayRegion(swigCPtr, JIntArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void SetLongArrayRegion(JLongArray array, int start, int len, long[] buf) {
    fixed ( long* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_SetLongArrayRegion(swigCPtr, JLongArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void SetFloatArrayRegion(JFloatArray array, int start, int len, float[] buf) {
    fixed ( float* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_SetFloatArrayRegion(swigCPtr, JFloatArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void SetDoubleArrayRegion(JDoubleArray array, int start, int len, double[] buf) {
    fixed ( double* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_SetDoubleArrayRegion(swigCPtr, JDoubleArray.getCPtr(array), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public int RegisterNatives(JClass clazz, JNINativeMethod methods, int nMethods) {
    int ret = JNIPINVOKE.JNIEnv_RegisterNatives(swigCPtr, JClass.getCPtr(clazz), JNINativeMethod.getCPtr(methods), nMethods);
    return ret;
  }

  public int UnregisterNatives(JClass clazz) {
    int ret = JNIPINVOKE.JNIEnv_UnregisterNatives(swigCPtr, JClass.getCPtr(clazz));
    return ret;
  }

  public int MonitorEnter(JObject obj) {
    int ret = JNIPINVOKE.JNIEnv_MonitorEnter(swigCPtr, JObject.getCPtr(obj));
    return ret;
  }

  public int MonitorExit(JObject obj) {
    int ret = JNIPINVOKE.JNIEnv_MonitorExit(swigCPtr, JObject.getCPtr(obj));
    return ret;
  }

  public void GetStringRegion(JString str, int start, int len, char[] buf) {
    fixed ( char* swig_ptrTo_buf = buf ) {
    {
      JNIPINVOKE.JNIEnv_GetStringRegion(swigCPtr, JString.getCPtr(str), start, len, (global::System.IntPtr)swig_ptrTo_buf);
    }
    }
  }

  public void GetStringUTFRegion(JString str, int start, int len, string buf) {
    JNIPINVOKE.JNIEnv_GetStringUTFRegion(swigCPtr, JString.getCPtr(str), start, len, buf);
  }

  public JObject NewWeakGlobalRef(JObject obj) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_NewWeakGlobalRef(swigCPtr, JObject.getCPtr(obj));
    JObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new JObject(cPtr, false);
    return ret;
  }

  public void DeleteWeakGlobalRef(JObject ref_) {
    JNIPINVOKE.JNIEnv_DeleteWeakGlobalRef(swigCPtr, JObject.getCPtr(ref_));
  }

  public /* cstype jboolean */ bool ExceptionCheck()  {
    // csout jboolean
    bool ret = JNIPINVOKE.JNIEnv_ExceptionCheck(swigCPtr);
    return ret;
  } 

  public long GetDirectBufferCapacity(JObject buf) {
    long ret = JNIPINVOKE.JNIEnv_GetDirectBufferCapacity(swigCPtr, JObject.getCPtr(buf));
    return ret;
  }

  public JObjectRefType GetObjectRefType(JObject obj) {
    JObjectRefType ret = (JObjectRefType)JNIPINVOKE.JNIEnv_GetObjectRefType(swigCPtr, JObject.getCPtr(obj));
    return ret;
  }

  public PrimitiveArray_jboolean GetBooleanArrayElements_2(JBooleanArray array, ref bool isCopy) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_GetBooleanArrayElements_2(swigCPtr, JBooleanArray.getCPtr(array), ref isCopy);
    PrimitiveArray_jboolean ret = (cPtr == global::System.IntPtr.Zero) ? null : new PrimitiveArray_jboolean(cPtr, false);
    return ret;
  }

  public PrimitiveArray_jchar GetCharArrayElements_2(JCharArray array, ref bool isCopy) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_GetCharArrayElements_2(swigCPtr, JCharArray.getCPtr(array), ref isCopy);
    PrimitiveArray_jchar ret = (cPtr == global::System.IntPtr.Zero) ? null : new PrimitiveArray_jchar(cPtr, false);
    return ret;
  }

  public PrimitiveArray_jbyte GetByteArrayElements_2(JByteArray array, ref bool isCopy) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_GetByteArrayElements_2(swigCPtr, JByteArray.getCPtr(array), ref isCopy);
    PrimitiveArray_jbyte ret = (cPtr == global::System.IntPtr.Zero) ? null : new PrimitiveArray_jbyte(cPtr, false);
    return ret;
  }

  public PrimitiveArray_jshort GetShortArrayElements_2(JShortArray array, ref bool isCopy) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_GetShortArrayElements_2(swigCPtr, JShortArray.getCPtr(array), ref isCopy);
    PrimitiveArray_jshort ret = (cPtr == global::System.IntPtr.Zero) ? null : new PrimitiveArray_jshort(cPtr, false);
    return ret;
  }

  public PrimitiveArray_jint GetIntArrayElements_2(JIntArray array, ref bool isCopy) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_GetIntArrayElements_2(swigCPtr, JIntArray.getCPtr(array), ref isCopy);
    PrimitiveArray_jint ret = (cPtr == global::System.IntPtr.Zero) ? null : new PrimitiveArray_jint(cPtr, false);
    return ret;
  }

  public PrimitiveArray_jlong GetLongArrayElements_2(JLongArray array, ref bool isCopy) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_GetLongArrayElements_2(swigCPtr, JLongArray.getCPtr(array), ref isCopy);
    PrimitiveArray_jlong ret = (cPtr == global::System.IntPtr.Zero) ? null : new PrimitiveArray_jlong(cPtr, false);
    return ret;
  }

  public PrimitiveArray_jfloat GetFloatArrayElements_2(JFloatArray array, ref bool isCopy) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_GetFloatArrayElements_2(swigCPtr, JFloatArray.getCPtr(array), ref isCopy);
    PrimitiveArray_jfloat ret = (cPtr == global::System.IntPtr.Zero) ? null : new PrimitiveArray_jfloat(cPtr, false);
    return ret;
  }

  public PrimitiveArray_jdouble GetDoubleArrayElements_2(JDoubleArray array, ref bool isCopy) {
    global::System.IntPtr cPtr = JNIPINVOKE.JNIEnv_GetDoubleArrayElements_2(swigCPtr, JDoubleArray.getCPtr(array), ref isCopy);
    PrimitiveArray_jdouble ret = (cPtr == global::System.IntPtr.Zero) ? null : new PrimitiveArray_jdouble(cPtr, false);
    return ret;
  }

  public void ReleaseBooleanArrayElements_2(JBooleanArray array, PrimitiveArray_jboolean elems, int mode) {
    JNIPINVOKE.JNIEnv_ReleaseBooleanArrayElements_2(swigCPtr, JBooleanArray.getCPtr(array), PrimitiveArray_jboolean.getCPtr(elems), mode);
  }

  public void ReleaseCharArrayElements_2(JCharArray array, PrimitiveArray_jchar elems, int mode) {
    JNIPINVOKE.JNIEnv_ReleaseCharArrayElements_2(swigCPtr, JCharArray.getCPtr(array), PrimitiveArray_jchar.getCPtr(elems), mode);
  }

  public void ReleaseByteArrayElements_2(JByteArray array, PrimitiveArray_jbyte elems, int mode) {
    JNIPINVOKE.JNIEnv_ReleaseByteArrayElements_2(swigCPtr, JByteArray.getCPtr(array), PrimitiveArray_jbyte.getCPtr(elems), mode);
  }

  public void ReleaseShortArrayElements_2(JShortArray array, PrimitiveArray_jshort elems, int mode) {
    JNIPINVOKE.JNIEnv_ReleaseShortArrayElements_2(swigCPtr, JShortArray.getCPtr(array), PrimitiveArray_jshort.getCPtr(elems), mode);
  }

  public void ReleaseIntArrayElements_2(JIntArray array, PrimitiveArray_jint elems, int mode) {
    JNIPINVOKE.JNIEnv_ReleaseIntArrayElements_2(swigCPtr, JIntArray.getCPtr(array), PrimitiveArray_jint.getCPtr(elems), mode);
  }

  public void ReleaseLongArrayElements_2(JLongArray array, PrimitiveArray_jlong elems, int mode) {
    JNIPINVOKE.JNIEnv_ReleaseLongArrayElements_2(swigCPtr, JLongArray.getCPtr(array), PrimitiveArray_jlong.getCPtr(elems), mode);
  }

  public void ReleaseFloatArrayElements_2(JFloatArray array, PrimitiveArray_jfloat elems, int mode) {
    JNIPINVOKE.JNIEnv_ReleaseFloatArrayElements_2(swigCPtr, JFloatArray.getCPtr(array), PrimitiveArray_jfloat.getCPtr(elems), mode);
  }

  public void ReleaseDoubleArrayElements_2(JDoubleArray array, PrimitiveArray_jdouble elems, int mode) {
    JNIPINVOKE.JNIEnv_ReleaseDoubleArrayElements_2(swigCPtr, JDoubleArray.getCPtr(array), PrimitiveArray_jdouble.getCPtr(elems), mode);
  }

  public int GetJavaVM_2(Ref_JavaVM refvm) {
    int ret = JNIPINVOKE.JNIEnv_GetJavaVM_2(swigCPtr, Ref_JavaVM.getCPtr(refvm));
    return ret;
  }

  public JNIEnv() : this(JNIPINVOKE.new_JNIEnv(), true) {
  }

}

}
