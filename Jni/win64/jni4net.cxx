/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_JNI(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_JNI(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_JNI(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "win32/jni_md.h"
#include "jni.h"


typedef jboolean jboolean_ARRAY;

SWIGINTERN jboolean_ARRAY *new_jboolean_ARRAY(int nelements){
  return new jboolean[nelements]();
}
SWIGINTERN void delete_jboolean_ARRAY(jboolean_ARRAY *self){
  delete [] self;
}
SWIGINTERN jboolean jboolean_ARRAY_getitem(jboolean_ARRAY *self,int index){
  return self[index];
}
SWIGINTERN void jboolean_ARRAY_setitem(jboolean_ARRAY *self,int index,jboolean value){
  self[index] = value;
}
SWIGINTERN jboolean *jboolean_ARRAY_cast(jboolean_ARRAY *self){
  return self;
}
SWIGINTERN jboolean_ARRAY *jboolean_ARRAY_frompointer(jboolean *t){
  return (jboolean_ARRAY *) t;
}

typedef jchar jchar_ARRAY;

SWIGINTERN jchar_ARRAY *new_jchar_ARRAY(int nelements){
  return new jchar[nelements]();
}
SWIGINTERN void delete_jchar_ARRAY(jchar_ARRAY *self){
  delete [] self;
}
SWIGINTERN jchar jchar_ARRAY_getitem(jchar_ARRAY *self,int index){
  return self[index];
}
SWIGINTERN void jchar_ARRAY_setitem(jchar_ARRAY *self,int index,jchar value){
  self[index] = value;
}
SWIGINTERN jchar *jchar_ARRAY_cast(jchar_ARRAY *self){
  return self;
}
SWIGINTERN jchar_ARRAY *jchar_ARRAY_frompointer(jchar *t){
  return (jchar_ARRAY *) t;
}

typedef jbyte jbyte_ARRAY;

SWIGINTERN jbyte_ARRAY *new_jbyte_ARRAY(int nelements){
  return new jbyte[nelements]();
}
SWIGINTERN void delete_jbyte_ARRAY(jbyte_ARRAY *self){
  delete [] self;
}
SWIGINTERN jbyte jbyte_ARRAY_getitem(jbyte_ARRAY *self,int index){
  return self[index];
}
SWIGINTERN void jbyte_ARRAY_setitem(jbyte_ARRAY *self,int index,jbyte value){
  self[index] = value;
}
SWIGINTERN jbyte *jbyte_ARRAY_cast(jbyte_ARRAY *self){
  return self;
}
SWIGINTERN jbyte_ARRAY *jbyte_ARRAY_frompointer(jbyte *t){
  return (jbyte_ARRAY *) t;
}

typedef jshort jshort_ARRAY;

SWIGINTERN jshort_ARRAY *new_jshort_ARRAY(int nelements){
  return new jshort[nelements]();
}
SWIGINTERN void delete_jshort_ARRAY(jshort_ARRAY *self){
  delete [] self;
}
SWIGINTERN jshort jshort_ARRAY_getitem(jshort_ARRAY *self,int index){
  return self[index];
}
SWIGINTERN void jshort_ARRAY_setitem(jshort_ARRAY *self,int index,jshort value){
  self[index] = value;
}
SWIGINTERN jshort *jshort_ARRAY_cast(jshort_ARRAY *self){
  return self;
}
SWIGINTERN jshort_ARRAY *jshort_ARRAY_frompointer(jshort *t){
  return (jshort_ARRAY *) t;
}

typedef jint jint_ARRAY;

SWIGINTERN jint_ARRAY *new_jint_ARRAY(int nelements){
  return new jint[nelements]();
}
SWIGINTERN void delete_jint_ARRAY(jint_ARRAY *self){
  delete [] self;
}
SWIGINTERN jint jint_ARRAY_getitem(jint_ARRAY *self,int index){
  return self[index];
}
SWIGINTERN void jint_ARRAY_setitem(jint_ARRAY *self,int index,jint value){
  self[index] = value;
}
SWIGINTERN jint *jint_ARRAY_cast(jint_ARRAY *self){
  return self;
}
SWIGINTERN jint_ARRAY *jint_ARRAY_frompointer(jint *t){
  return (jint_ARRAY *) t;
}

typedef jlong jlong_ARRAY;

SWIGINTERN jlong_ARRAY *new_jlong_ARRAY(int nelements){
  return new jlong[nelements]();
}
SWIGINTERN void delete_jlong_ARRAY(jlong_ARRAY *self){
  delete [] self;
}
SWIGINTERN jlong jlong_ARRAY_getitem(jlong_ARRAY *self,int index){
  return self[index];
}
SWIGINTERN void jlong_ARRAY_setitem(jlong_ARRAY *self,int index,jlong value){
  self[index] = value;
}
SWIGINTERN jlong *jlong_ARRAY_cast(jlong_ARRAY *self){
  return self;
}
SWIGINTERN jlong_ARRAY *jlong_ARRAY_frompointer(jlong *t){
  return (jlong_ARRAY *) t;
}

typedef jfloat jfloat_ARRAY;

SWIGINTERN jfloat_ARRAY *new_jfloat_ARRAY(int nelements){
  return new jfloat[nelements]();
}
SWIGINTERN void delete_jfloat_ARRAY(jfloat_ARRAY *self){
  delete [] self;
}
SWIGINTERN jfloat jfloat_ARRAY_getitem(jfloat_ARRAY *self,int index){
  return self[index];
}
SWIGINTERN void jfloat_ARRAY_setitem(jfloat_ARRAY *self,int index,jfloat value){
  self[index] = value;
}
SWIGINTERN jfloat *jfloat_ARRAY_cast(jfloat_ARRAY *self){
  return self;
}
SWIGINTERN jfloat_ARRAY *jfloat_ARRAY_frompointer(jfloat *t){
  return (jfloat_ARRAY *) t;
}

typedef jdouble jdouble_ARRAY;

SWIGINTERN jdouble_ARRAY *new_jdouble_ARRAY(int nelements){
  return new jdouble[nelements]();
}
SWIGINTERN void delete_jdouble_ARRAY(jdouble_ARRAY *self){
  delete [] self;
}
SWIGINTERN jdouble jdouble_ARRAY_getitem(jdouble_ARRAY *self,int index){
  return self[index];
}
SWIGINTERN void jdouble_ARRAY_setitem(jdouble_ARRAY *self,int index,jdouble value){
  self[index] = value;
}
SWIGINTERN jdouble *jdouble_ARRAY_cast(jdouble_ARRAY *self){
  return self;
}
SWIGINTERN jdouble_ARRAY *jdouble_ARRAY_frompointer(jdouble *t){
  return (jdouble_ARRAY *) t;
}

jboolean GetValue(jboolean *elems, jint index) { return elems[index]; }
void SetValue(jboolean *elems, jint index, jboolean value) { elems[index] = value; }


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_VaList() {
  void * jresult ;
  va_list *result = 0 ;
  
  result = (va_list *)new va_list();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_va_list(void * jarg1) {
  va_list *arg1 = (va_list *) 0 ;
  
  arg1 = (va_list *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_jboolean_ARRAY(int jarg1) {
  void * jresult ;
  int arg1 ;
  jboolean_ARRAY *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (jboolean_ARRAY *)new_jboolean_ARRAY(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_jboolean_ARRAY(void * jarg1) {
  jboolean_ARRAY *arg1 = (jboolean_ARRAY *) 0 ;
  
  arg1 = (jboolean_ARRAY *)jarg1; 
  delete_jboolean_ARRAY(arg1);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_jboolean_ARRAY_getitem(void * jarg1, int jarg2) {
  unsigned char jresult ;
  jboolean_ARRAY *arg1 = (jboolean_ARRAY *) 0 ;
  int arg2 ;
  jboolean result;
  
  arg1 = (jboolean_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  result = (jboolean)jboolean_ARRAY_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_jboolean_ARRAY_setitem(void * jarg1, int jarg2, unsigned char jarg3) {
  jboolean_ARRAY *arg1 = (jboolean_ARRAY *) 0 ;
  int arg2 ;
  jboolean arg3 ;
  
  arg1 = (jboolean_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (jboolean)jarg3; 
  jboolean_ARRAY_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jboolean_ARRAY_cast(void * jarg1) {
  void * jresult ;
  jboolean_ARRAY *arg1 = (jboolean_ARRAY *) 0 ;
  jboolean *result = 0 ;
  
  arg1 = (jboolean_ARRAY *)jarg1; 
  result = (jboolean *)jboolean_ARRAY_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jboolean_ARRAY_frompointer(void * jarg1) {
  void * jresult ;
  jboolean *arg1 = (jboolean *) 0 ;
  jboolean_ARRAY *result = 0 ;
  
  arg1 = (jboolean *)jarg1; 
  result = (jboolean_ARRAY *)jboolean_ARRAY_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_jchar_ARRAY(int jarg1) {
  void * jresult ;
  int arg1 ;
  jchar_ARRAY *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (jchar_ARRAY *)new_jchar_ARRAY(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_jchar_ARRAY(void * jarg1) {
  jchar_ARRAY *arg1 = (jchar_ARRAY *) 0 ;
  
  arg1 = (jchar_ARRAY *)jarg1; 
  delete_jchar_ARRAY(arg1);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_jchar_ARRAY_getitem(void * jarg1, int jarg2) {
  unsigned short jresult ;
  jchar_ARRAY *arg1 = (jchar_ARRAY *) 0 ;
  int arg2 ;
  jchar result;
  
  arg1 = (jchar_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  result = (jchar)jchar_ARRAY_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_jchar_ARRAY_setitem(void * jarg1, int jarg2, unsigned short jarg3) {
  jchar_ARRAY *arg1 = (jchar_ARRAY *) 0 ;
  int arg2 ;
  jchar arg3 ;
  
  arg1 = (jchar_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (jchar)jarg3; 
  jchar_ARRAY_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jchar_ARRAY_cast(void * jarg1) {
  void * jresult ;
  jchar_ARRAY *arg1 = (jchar_ARRAY *) 0 ;
  jchar *result = 0 ;
  
  arg1 = (jchar_ARRAY *)jarg1; 
  result = (jchar *)jchar_ARRAY_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jchar_ARRAY_frompointer(void * jarg1) {
  void * jresult ;
  jchar *arg1 = (jchar *) 0 ;
  jchar_ARRAY *result = 0 ;
  
  arg1 = (jchar *)jarg1; 
  result = (jchar_ARRAY *)jchar_ARRAY_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_jbyte_ARRAY(int jarg1) {
  void * jresult ;
  int arg1 ;
  jbyte_ARRAY *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (jbyte_ARRAY *)new_jbyte_ARRAY(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_jbyte_ARRAY(void * jarg1) {
  jbyte_ARRAY *arg1 = (jbyte_ARRAY *) 0 ;
  
  arg1 = (jbyte_ARRAY *)jarg1; 
  delete_jbyte_ARRAY(arg1);
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_jbyte_ARRAY_getitem(void * jarg1, int jarg2) {
  signed char jresult ;
  jbyte_ARRAY *arg1 = (jbyte_ARRAY *) 0 ;
  int arg2 ;
  jbyte result;
  
  arg1 = (jbyte_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  result = (jbyte)jbyte_ARRAY_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_jbyte_ARRAY_setitem(void * jarg1, int jarg2, signed char jarg3) {
  jbyte_ARRAY *arg1 = (jbyte_ARRAY *) 0 ;
  int arg2 ;
  jbyte arg3 ;
  
  arg1 = (jbyte_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (jbyte)jarg3; 
  jbyte_ARRAY_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jbyte_ARRAY_cast(void * jarg1) {
  void * jresult ;
  jbyte_ARRAY *arg1 = (jbyte_ARRAY *) 0 ;
  jbyte *result = 0 ;
  
  arg1 = (jbyte_ARRAY *)jarg1; 
  result = (jbyte *)jbyte_ARRAY_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jbyte_ARRAY_frompointer(void * jarg1) {
  void * jresult ;
  jbyte *arg1 = (jbyte *) 0 ;
  jbyte_ARRAY *result = 0 ;
  
  arg1 = (jbyte *)jarg1; 
  result = (jbyte_ARRAY *)jbyte_ARRAY_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_jshort_ARRAY(int jarg1) {
  void * jresult ;
  int arg1 ;
  jshort_ARRAY *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (jshort_ARRAY *)new_jshort_ARRAY(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_jshort_ARRAY(void * jarg1) {
  jshort_ARRAY *arg1 = (jshort_ARRAY *) 0 ;
  
  arg1 = (jshort_ARRAY *)jarg1; 
  delete_jshort_ARRAY(arg1);
}


SWIGEXPORT short SWIGSTDCALL CSharp_jshort_ARRAY_getitem(void * jarg1, int jarg2) {
  short jresult ;
  jshort_ARRAY *arg1 = (jshort_ARRAY *) 0 ;
  int arg2 ;
  jshort result;
  
  arg1 = (jshort_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  result = (jshort)jshort_ARRAY_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_jshort_ARRAY_setitem(void * jarg1, int jarg2, short jarg3) {
  jshort_ARRAY *arg1 = (jshort_ARRAY *) 0 ;
  int arg2 ;
  jshort arg3 ;
  
  arg1 = (jshort_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (jshort)jarg3; 
  jshort_ARRAY_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jshort_ARRAY_cast(void * jarg1) {
  void * jresult ;
  jshort_ARRAY *arg1 = (jshort_ARRAY *) 0 ;
  jshort *result = 0 ;
  
  arg1 = (jshort_ARRAY *)jarg1; 
  result = (jshort *)jshort_ARRAY_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jshort_ARRAY_frompointer(void * jarg1) {
  void * jresult ;
  jshort *arg1 = (jshort *) 0 ;
  jshort_ARRAY *result = 0 ;
  
  arg1 = (jshort *)jarg1; 
  result = (jshort_ARRAY *)jshort_ARRAY_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_jint_ARRAY(int jarg1) {
  void * jresult ;
  int arg1 ;
  jint_ARRAY *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (jint_ARRAY *)new_jint_ARRAY(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_jint_ARRAY(void * jarg1) {
  jint_ARRAY *arg1 = (jint_ARRAY *) 0 ;
  
  arg1 = (jint_ARRAY *)jarg1; 
  delete_jint_ARRAY(arg1);
}


SWIGEXPORT long SWIGSTDCALL CSharp_jint_ARRAY_getitem(void * jarg1, int jarg2) {
  long jresult ;
  jint_ARRAY *arg1 = (jint_ARRAY *) 0 ;
  int arg2 ;
  jint result;
  
  arg1 = (jint_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  result = (jint)jint_ARRAY_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_jint_ARRAY_setitem(void * jarg1, int jarg2, long jarg3) {
  jint_ARRAY *arg1 = (jint_ARRAY *) 0 ;
  int arg2 ;
  jint arg3 ;
  
  arg1 = (jint_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (jint)jarg3; 
  jint_ARRAY_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jint_ARRAY_cast(void * jarg1) {
  void * jresult ;
  jint_ARRAY *arg1 = (jint_ARRAY *) 0 ;
  jint *result = 0 ;
  
  arg1 = (jint_ARRAY *)jarg1; 
  result = (jint *)jint_ARRAY_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jint_ARRAY_frompointer(void * jarg1) {
  void * jresult ;
  jint *arg1 = (jint *) 0 ;
  jint_ARRAY *result = 0 ;
  
  arg1 = (jint *)jarg1; 
  result = (jint_ARRAY *)jint_ARRAY_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_jlong_ARRAY(int jarg1) {
  void * jresult ;
  int arg1 ;
  jlong_ARRAY *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (jlong_ARRAY *)new_jlong_ARRAY(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_jlong_ARRAY(void * jarg1) {
  jlong_ARRAY *arg1 = (jlong_ARRAY *) 0 ;
  
  arg1 = (jlong_ARRAY *)jarg1; 
  delete_jlong_ARRAY(arg1);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_jlong_ARRAY_getitem(void * jarg1, int jarg2) {
  long long jresult ;
  jlong_ARRAY *arg1 = (jlong_ARRAY *) 0 ;
  int arg2 ;
  jlong result;
  
  arg1 = (jlong_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  result = jlong_ARRAY_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_jlong_ARRAY_setitem(void * jarg1, int jarg2, long long jarg3) {
  jlong_ARRAY *arg1 = (jlong_ARRAY *) 0 ;
  int arg2 ;
  jlong arg3 ;
  
  arg1 = (jlong_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (jlong)jarg3; 
  jlong_ARRAY_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jlong_ARRAY_cast(void * jarg1) {
  void * jresult ;
  jlong_ARRAY *arg1 = (jlong_ARRAY *) 0 ;
  jlong *result = 0 ;
  
  arg1 = (jlong_ARRAY *)jarg1; 
  result = (jlong *)jlong_ARRAY_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jlong_ARRAY_frompointer(void * jarg1) {
  void * jresult ;
  jlong *arg1 = (jlong *) 0 ;
  jlong_ARRAY *result = 0 ;
  
  arg1 = (jlong *)jarg1; 
  result = (jlong_ARRAY *)jlong_ARRAY_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_jfloat_ARRAY(int jarg1) {
  void * jresult ;
  int arg1 ;
  jfloat_ARRAY *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (jfloat_ARRAY *)new_jfloat_ARRAY(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_jfloat_ARRAY(void * jarg1) {
  jfloat_ARRAY *arg1 = (jfloat_ARRAY *) 0 ;
  
  arg1 = (jfloat_ARRAY *)jarg1; 
  delete_jfloat_ARRAY(arg1);
}


SWIGEXPORT float SWIGSTDCALL CSharp_jfloat_ARRAY_getitem(void * jarg1, int jarg2) {
  float jresult ;
  jfloat_ARRAY *arg1 = (jfloat_ARRAY *) 0 ;
  int arg2 ;
  jfloat result;
  
  arg1 = (jfloat_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  result = (jfloat)jfloat_ARRAY_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_jfloat_ARRAY_setitem(void * jarg1, int jarg2, float jarg3) {
  jfloat_ARRAY *arg1 = (jfloat_ARRAY *) 0 ;
  int arg2 ;
  jfloat arg3 ;
  
  arg1 = (jfloat_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (jfloat)jarg3; 
  jfloat_ARRAY_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jfloat_ARRAY_cast(void * jarg1) {
  void * jresult ;
  jfloat_ARRAY *arg1 = (jfloat_ARRAY *) 0 ;
  jfloat *result = 0 ;
  
  arg1 = (jfloat_ARRAY *)jarg1; 
  result = (jfloat *)jfloat_ARRAY_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jfloat_ARRAY_frompointer(void * jarg1) {
  void * jresult ;
  jfloat *arg1 = (jfloat *) 0 ;
  jfloat_ARRAY *result = 0 ;
  
  arg1 = (jfloat *)jarg1; 
  result = (jfloat_ARRAY *)jfloat_ARRAY_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_jdouble_ARRAY(int jarg1) {
  void * jresult ;
  int arg1 ;
  jdouble_ARRAY *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (jdouble_ARRAY *)new_jdouble_ARRAY(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_jdouble_ARRAY(void * jarg1) {
  jdouble_ARRAY *arg1 = (jdouble_ARRAY *) 0 ;
  
  arg1 = (jdouble_ARRAY *)jarg1; 
  delete_jdouble_ARRAY(arg1);
}


SWIGEXPORT double SWIGSTDCALL CSharp_jdouble_ARRAY_getitem(void * jarg1, int jarg2) {
  double jresult ;
  jdouble_ARRAY *arg1 = (jdouble_ARRAY *) 0 ;
  int arg2 ;
  jdouble result;
  
  arg1 = (jdouble_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  result = (jdouble)jdouble_ARRAY_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_jdouble_ARRAY_setitem(void * jarg1, int jarg2, double jarg3) {
  jdouble_ARRAY *arg1 = (jdouble_ARRAY *) 0 ;
  int arg2 ;
  jdouble arg3 ;
  
  arg1 = (jdouble_ARRAY *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (jdouble)jarg3; 
  jdouble_ARRAY_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jdouble_ARRAY_cast(void * jarg1) {
  void * jresult ;
  jdouble_ARRAY *arg1 = (jdouble_ARRAY *) 0 ;
  jdouble *result = 0 ;
  
  arg1 = (jdouble_ARRAY *)jarg1; 
  result = (jdouble *)jdouble_ARRAY_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_jdouble_ARRAY_frompointer(void * jarg1) {
  void * jresult ;
  jdouble *arg1 = (jdouble *) 0 ;
  jdouble_ARRAY *result = 0 ;
  
  arg1 = (jdouble *)jarg1; 
  result = (jdouble_ARRAY *)jdouble_ARRAY_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_GetValue(void * jarg1, long jarg2) {
  unsigned char jresult ;
  jboolean *arg1 = (jboolean *) 0 ;
  jint arg2 ;
  jboolean result;
  
  arg1 = (jboolean *)jarg1; 
  arg2 = (jint)jarg2; 
  result = (jboolean)GetValue(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetValue(void * jarg1, long jarg2, unsigned char jarg3) {
  jboolean *arg1 = (jboolean *) 0 ;
  jint arg2 ;
  jboolean arg3 ;
  
  arg1 = (jboolean *)jarg1; 
  arg2 = (jint)jarg2; 
  arg3 = (jboolean)jarg3; 
  SetValue(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JObject() {
  void * jresult ;
  _jobject *result = 0 ;
  
  result = (_jobject *)new _jobject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JObject(void * jarg1) {
  _jobject *arg1 = (_jobject *) 0 ;
  
  arg1 = (_jobject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JClass() {
  void * jresult ;
  _jclass *result = 0 ;
  
  result = (_jclass *)new _jclass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JClass(void * jarg1) {
  _jclass *arg1 = (_jclass *) 0 ;
  
  arg1 = (_jclass *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JThrowable() {
  void * jresult ;
  _jthrowable *result = 0 ;
  
  result = (_jthrowable *)new _jthrowable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JThrowable(void * jarg1) {
  _jthrowable *arg1 = (_jthrowable *) 0 ;
  
  arg1 = (_jthrowable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JString() {
  void * jresult ;
  _jstring *result = 0 ;
  
  result = (_jstring *)new _jstring();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JString(void * jarg1) {
  _jstring *arg1 = (_jstring *) 0 ;
  
  arg1 = (_jstring *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JArray() {
  void * jresult ;
  _jarray *result = 0 ;
  
  result = (_jarray *)new _jarray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JArray(void * jarg1) {
  _jarray *arg1 = (_jarray *) 0 ;
  
  arg1 = (_jarray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JBooleanArray() {
  void * jresult ;
  _jbooleanArray *result = 0 ;
  
  result = (_jbooleanArray *)new _jbooleanArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JBooleanArray(void * jarg1) {
  _jbooleanArray *arg1 = (_jbooleanArray *) 0 ;
  
  arg1 = (_jbooleanArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JByteArray() {
  void * jresult ;
  _jbyteArray *result = 0 ;
  
  result = (_jbyteArray *)new _jbyteArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JByteArray(void * jarg1) {
  _jbyteArray *arg1 = (_jbyteArray *) 0 ;
  
  arg1 = (_jbyteArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JCharArray() {
  void * jresult ;
  _jcharArray *result = 0 ;
  
  result = (_jcharArray *)new _jcharArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JCharArray(void * jarg1) {
  _jcharArray *arg1 = (_jcharArray *) 0 ;
  
  arg1 = (_jcharArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JShortArray() {
  void * jresult ;
  _jshortArray *result = 0 ;
  
  result = (_jshortArray *)new _jshortArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JShortArray(void * jarg1) {
  _jshortArray *arg1 = (_jshortArray *) 0 ;
  
  arg1 = (_jshortArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JIntArray() {
  void * jresult ;
  _jintArray *result = 0 ;
  
  result = (_jintArray *)new _jintArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JIntArray(void * jarg1) {
  _jintArray *arg1 = (_jintArray *) 0 ;
  
  arg1 = (_jintArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JLongArray() {
  void * jresult ;
  _jlongArray *result = 0 ;
  
  result = (_jlongArray *)new _jlongArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JLongArray(void * jarg1) {
  _jlongArray *arg1 = (_jlongArray *) 0 ;
  
  arg1 = (_jlongArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JFloatArray() {
  void * jresult ;
  _jfloatArray *result = 0 ;
  
  result = (_jfloatArray *)new _jfloatArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JFloatArray(void * jarg1) {
  _jfloatArray *arg1 = (_jfloatArray *) 0 ;
  
  arg1 = (_jfloatArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JDoubleArray() {
  void * jresult ;
  _jdoubleArray *result = 0 ;
  
  result = (_jdoubleArray *)new _jdoubleArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JDoubleArray(void * jarg1) {
  _jdoubleArray *arg1 = (_jdoubleArray *) 0 ;
  
  arg1 = (_jdoubleArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JObjectArray() {
  void * jresult ;
  _jobjectArray *result = 0 ;
  
  result = (_jobjectArray *)new _jobjectArray();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JObjectArray(void * jarg1) {
  _jobjectArray *arg1 = (_jobjectArray *) 0 ;
  
  arg1 = (_jobjectArray *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JValue_z_set(void * jarg1, unsigned char jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jboolean arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jboolean)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JValue_z_get(void * jarg1) {
  unsigned char jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jboolean result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jboolean) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JValue_b_set(void * jarg1, signed char jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jbyte arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jbyte)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_JValue_b_get(void * jarg1) {
  signed char jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jbyte result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jbyte) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JValue_c_set(void * jarg1, unsigned short jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jchar arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jchar)jarg2; 
  if (arg1) (arg1)->c = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_JValue_c_get(void * jarg1) {
  unsigned short jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jchar result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jchar) ((arg1)->c);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JValue_s_set(void * jarg1, short jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jshort arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jshort)jarg2; 
  if (arg1) (arg1)->s = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_JValue_s_get(void * jarg1) {
  short jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jshort result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jshort) ((arg1)->s);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JValue_i_set(void * jarg1, long jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jint arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jint)jarg2; 
  if (arg1) (arg1)->i = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JValue_i_get(void * jarg1) {
  long jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jint result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jint) ((arg1)->i);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JValue_j_set(void * jarg1, long long jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jlong arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jlong)jarg2; 
  if (arg1) (arg1)->j = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_JValue_j_get(void * jarg1) {
  long long jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jlong result;
  
  arg1 = (jvalue *)jarg1; 
  result =  ((arg1)->j);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JValue_f_set(void * jarg1, float jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jfloat arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jfloat)jarg2; 
  if (arg1) (arg1)->f = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_JValue_f_get(void * jarg1) {
  float jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jfloat result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jfloat) ((arg1)->f);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JValue_d_set(void * jarg1, double jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jdouble arg2 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jdouble)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_JValue_d_get(void * jarg1) {
  double jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jdouble result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jdouble) ((arg1)->d);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JValue_l_set(void * jarg1, void * jarg2) {
  jvalue *arg1 = (jvalue *) 0 ;
  jobject arg2 = (jobject) 0 ;
  
  arg1 = (jvalue *)jarg1; 
  arg2 = (jobject)jarg2; 
  if (arg1) (arg1)->l = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JValue_l_get(void * jarg1) {
  void * jresult ;
  jvalue *arg1 = (jvalue *) 0 ;
  jobject result;
  
  arg1 = (jvalue *)jarg1; 
  result = (jobject) ((arg1)->l);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JValue() {
  void * jresult ;
  jvalue *result = 0 ;
  
  result = (jvalue *)new jvalue();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JValue(void * jarg1) {
  jvalue *arg1 = (jvalue *) 0 ;
  
  arg1 = (jvalue *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_FALSE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_TRUE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_OK_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_ERR_get() {
  int jresult ;
  int result;
  
  result = (int)((-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_EDETACHED_get() {
  int jresult ;
  int result;
  
  result = (int)((-2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_EVERSION_get() {
  int jresult ;
  int result;
  
  result = (int)((-3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_ENOMEM_get() {
  int jresult ;
  int result;
  
  result = (int)((-4));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_EEXIST_get() {
  int jresult ;
  int result;
  
  result = (int)((-5));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_EINVAL_get() {
  int jresult ;
  int result;
  
  result = (int)((-6));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_COMMIT_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_ABORT_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNINativeMethod_name_set(void * jarg1, char * jarg2) {
  JNINativeMethod *arg1 = (JNINativeMethod *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (JNINativeMethod *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_JNINativeMethod_name_get(void * jarg1) {
  char * jresult ;
  JNINativeMethod *arg1 = (JNINativeMethod *) 0 ;
  char *result = 0 ;
  
  arg1 = (JNINativeMethod *)jarg1; 
  result = (char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNINativeMethod_signature_set(void * jarg1, char * jarg2) {
  JNINativeMethod *arg1 = (JNINativeMethod *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (JNINativeMethod *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->signature;
    if (arg2) {
      arg1->signature = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->signature, (const char *)arg2);
    } else {
      arg1->signature = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_JNINativeMethod_signature_get(void * jarg1) {
  char * jresult ;
  JNINativeMethod *arg1 = (JNINativeMethod *) 0 ;
  char *result = 0 ;
  
  arg1 = (JNINativeMethod *)jarg1; 
  result = (char *) ((arg1)->signature);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNINativeMethod_fnPtr_set(void * jarg1, void * jarg2) {
  JNINativeMethod *arg1 = (JNINativeMethod *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (JNINativeMethod *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->fnPtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNINativeMethod_fnPtr_get(void * jarg1) {
  void * jresult ;
  JNINativeMethod *arg1 = (JNINativeMethod *) 0 ;
  void *result = 0 ;
  
  arg1 = (JNINativeMethod *)jarg1; 
  result = (void *) ((arg1)->fnPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JNINativeMethod() {
  void * jresult ;
  JNINativeMethod *result = 0 ;
  
  result = (JNINativeMethod *)new JNINativeMethod();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JNINativeMethod(void * jarg1) {
  JNINativeMethod *arg1 = (JNINativeMethod *) 0 ;
  
  arg1 = (JNINativeMethod *)jarg1; 
  delete arg1;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_GetVersion(void * jarg1) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  result = (jint)(arg1)->GetVersion();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_DefineClass(void * jarg1, char * jarg2, void * jarg3, signed char* jarg4, long jarg5) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  char *arg2 = (char *) 0 ;
  jobject arg3 = (jobject) 0 ;
  jbyte *arg4 = (jbyte *) 0 ;
  jsize arg5 ;
  jclass result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (jobject)jarg3; 
  arg4 = jarg4;
  arg5 = (jsize)jarg5; 
  result = (jclass)(arg1)->DefineClass((char const *)arg2,arg3,(jbyte const *)arg4,arg5);
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_FindClass(void * jarg1, char * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  char *arg2 = (char *) 0 ;
  jclass result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (jclass)(arg1)->FindClass((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT  jmethodID  SWIGSTDCALL CSharp_JNIEnv_FromReflectedMethod(void * jarg1, void * jarg2) {
  jmethodID  jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jmethodID)(arg1)->FromReflectedMethod(arg2);
  jresult = *(jmethodID*)&result; 
  return jresult;
}


SWIGEXPORT  jfieldID  SWIGSTDCALL CSharp_JNIEnv_FromReflectedField(void * jarg1, void * jarg2) {
  jfieldID  jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jfieldID)(arg1)->FromReflectedField(arg2);
  jresult = *(jfieldID*)&result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_ToReflectedMethod(void * jarg1, void * jarg2,  jmethodID  jarg3, unsigned char jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jboolean arg4 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jboolean)jarg4; 
  result = (jobject)(arg1)->ToReflectedMethod(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetSuperclass(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jclass result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  result = (jclass)(arg1)->GetSuperclass(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JNIEnv_IsAssignableFrom(void * jarg1, void * jarg2, void * jarg3) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jclass arg3 = (jclass) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = (jclass)jarg3; 
  result = (jboolean)(arg1)->IsAssignableFrom(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_ToReflectedField(void * jarg1, void * jarg2,  jfieldID  jarg3, unsigned char jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jboolean arg4 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jboolean)jarg4; 
  result = (jobject)(arg1)->ToReflectedField(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_Throw(void * jarg1, void * jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jthrowable arg2 = (jthrowable) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jthrowable)jarg2; 
  result = (jint)(arg1)->Throw(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_ThrowNew(void * jarg1, void * jarg2, char * jarg3) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  char *arg3 = (char *) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = (char *)jarg3; 
  result = (jint)(arg1)->ThrowNew(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_ExceptionOccurred(void * jarg1) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jthrowable result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  result = (jthrowable)(arg1)->ExceptionOccurred();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_ExceptionDescribe(void * jarg1) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  (arg1)->ExceptionDescribe();
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_ExceptionClear(void * jarg1) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  (arg1)->ExceptionClear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_FatalError(void * jarg1, char * jarg2) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->FatalError((char const *)arg2);
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_PushLocalFrame(void * jarg1, long jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jint arg2 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jint)jarg2; 
  result = (jint)(arg1)->PushLocalFrame(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_PopLocalFrame(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jobject)(arg1)->PopLocalFrame(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewGlobalRef(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jobject)(arg1)->NewGlobalRef(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_DeleteGlobalRef(void * jarg1, void * jarg2) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  (arg1)->DeleteGlobalRef(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_DeleteLocalRef(void * jarg1, void * jarg2) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  (arg1)->DeleteLocalRef(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JNIEnv_IsSameObject(void * jarg1, void * jarg2, void * jarg3) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jobject arg3 = (jobject) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jobject)jarg3; 
  result = (jboolean)(arg1)->IsSameObject(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewLocalRef(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jobject)(arg1)->NewLocalRef(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_EnsureLocalCapacity(void * jarg1, long jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jint arg2 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jint)jarg2; 
  result = (jint)(arg1)->EnsureLocalCapacity(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_AllocObject(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  result = (jobject)(arg1)->AllocObject(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewObject(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jobject)(arg1)->NewObject(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewObjectV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jobject)(arg1)->NewObjectV(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewObjectA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jobject)(arg1)->NewObjectA(arg2,arg3,(jvalue const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetObjectClass(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jclass)(arg1)->GetObjectClass(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JNIEnv_IsInstanceOf(void * jarg1, void * jarg2, void * jarg3) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  result = (jboolean)(arg1)->IsInstanceOf(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT  jmethodID  SWIGSTDCALL CSharp_JNIEnv_GetMethodID(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  jmethodID  jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  jmethodID result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (jmethodID)(arg1)->GetMethodID(arg2,(char const *)arg3,(char const *)arg4);
  jresult = *(jmethodID*)&result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_CallObjectMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jobject)(arg1)->CallObjectMethod(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_CallObjectMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jobject)(arg1)->CallObjectMethodV(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_CallObjectMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jobject)(arg1)->CallObjectMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JNIEnv_CallBooleanMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jboolean)(arg1)->CallBooleanMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JNIEnv_CallBooleanMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jboolean)(arg1)->CallBooleanMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JNIEnv_CallBooleanMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jboolean)(arg1)->CallBooleanMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_JNIEnv_CallByteMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jbyte)(arg1)->CallByteMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_JNIEnv_CallByteMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jbyte)(arg1)->CallByteMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_JNIEnv_CallByteMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jbyte)(arg1)->CallByteMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_JNIEnv_CallCharMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jchar)(arg1)->CallCharMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_JNIEnv_CallCharMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jchar)(arg1)->CallCharMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_JNIEnv_CallCharMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jchar)(arg1)->CallCharMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_JNIEnv_CallShortMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jshort)(arg1)->CallShortMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_JNIEnv_CallShortMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jshort)(arg1)->CallShortMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_JNIEnv_CallShortMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jshort)(arg1)->CallShortMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_CallIntMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jint)(arg1)->CallIntMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_CallIntMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jint)(arg1)->CallIntMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_CallIntMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jint)(arg1)->CallIntMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_JNIEnv_CallLongMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (arg1)->CallLongMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_JNIEnv_CallLongMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->CallLongMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_JNIEnv_CallLongMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (arg1)->CallLongMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_JNIEnv_CallFloatMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jfloat)(arg1)->CallFloatMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_JNIEnv_CallFloatMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jfloat)(arg1)->CallFloatMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_JNIEnv_CallFloatMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jfloat)(arg1)->CallFloatMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_JNIEnv_CallDoubleMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jdouble)(arg1)->CallDoubleMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_JNIEnv_CallDoubleMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jdouble)(arg1)->CallDoubleMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_JNIEnv_CallDoubleMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jdouble)(arg1)->CallDoubleMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_CallVoidMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  (arg1)->CallVoidMethod(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_CallVoidMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->CallVoidMethodV(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_CallVoidMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  (arg1)->CallVoidMethodA(arg2,arg3,(jvalue const *)arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualObjectMethod(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jobject)(arg1)->CallNonvirtualObjectMethod(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualObjectMethodV(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jobject)(arg1)->CallNonvirtualObjectMethodV(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualObjectMethodA(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jobject)(arg1)->CallNonvirtualObjectMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualBooleanMethod(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jboolean)(arg1)->CallNonvirtualBooleanMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualBooleanMethodV(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jboolean)(arg1)->CallNonvirtualBooleanMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualBooleanMethodA(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jboolean)(arg1)->CallNonvirtualBooleanMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualByteMethod(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jbyte)(arg1)->CallNonvirtualByteMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualByteMethodV(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jbyte)(arg1)->CallNonvirtualByteMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualByteMethodA(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jbyte)(arg1)->CallNonvirtualByteMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualCharMethod(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jchar)(arg1)->CallNonvirtualCharMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualCharMethodV(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jchar)(arg1)->CallNonvirtualCharMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualCharMethodA(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jchar)(arg1)->CallNonvirtualCharMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualShortMethod(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jshort)(arg1)->CallNonvirtualShortMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualShortMethodV(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jshort)(arg1)->CallNonvirtualShortMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualShortMethodA(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jshort)(arg1)->CallNonvirtualShortMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualIntMethod(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jint)(arg1)->CallNonvirtualIntMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualIntMethodV(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jint)(arg1)->CallNonvirtualIntMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualIntMethodA(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jint)(arg1)->CallNonvirtualIntMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualLongMethod(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (arg1)->CallNonvirtualLongMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualLongMethodV(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (arg1)->CallNonvirtualLongMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualLongMethodA(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (arg1)->CallNonvirtualLongMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualFloatMethod(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jfloat)(arg1)->CallNonvirtualFloatMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualFloatMethodV(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jfloat)(arg1)->CallNonvirtualFloatMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualFloatMethodA(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jfloat)(arg1)->CallNonvirtualFloatMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualDoubleMethod(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  result = (jdouble)(arg1)->CallNonvirtualDoubleMethod(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualDoubleMethodV(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg5 = *argp5; 
  result = (jdouble)(arg1)->CallNonvirtualDoubleMethodV(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualDoubleMethodA(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  result = (jdouble)(arg1)->CallNonvirtualDoubleMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualVoidMethod(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  void *arg5 = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  (arg1)->CallNonvirtualVoidMethod(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualVoidMethodV(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  argp5 = (va_list *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->CallNonvirtualVoidMethodV(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_CallNonvirtualVoidMethodA(void * jarg1, void * jarg2, void * jarg3,  jmethodID  jarg4, void * jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jclass arg3 = (jclass) 0 ;
  jmethodID arg4 = (jmethodID) 0 ;
  jvalue *arg5 = (jvalue *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = *(jmethodID*)&jarg4; 
  arg5 = (jvalue *)jarg5; 
  (arg1)->CallNonvirtualVoidMethodA(arg2,arg3,arg4,(jvalue const *)arg5);
}


SWIGEXPORT  jfieldID  SWIGSTDCALL CSharp_JNIEnv_GetFieldID(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  jfieldID  jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  jfieldID result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (jfieldID)(arg1)->GetFieldID(arg2,(char const *)arg3,(char const *)arg4);
  jresult = *(jfieldID*)&result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetObjectField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jobject)(arg1)->GetObjectField(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JNIEnv_GetBooleanField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jboolean)(arg1)->GetBooleanField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_JNIEnv_GetByteField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jbyte)(arg1)->GetByteField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_JNIEnv_GetCharField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jchar)(arg1)->GetCharField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_JNIEnv_GetShortField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jshort)(arg1)->GetShortField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_GetIntField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jint)(arg1)->GetIntField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_JNIEnv_GetLongField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (arg1)->GetLongField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_JNIEnv_GetFloatField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jfloat)(arg1)->GetFloatField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_JNIEnv_GetDoubleField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jdouble)(arg1)->GetDoubleField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetObjectField(void * jarg1, void * jarg2,  jfieldID  jarg3, void * jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jobject arg4 = (jobject) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jobject)jarg4; 
  (arg1)->SetObjectField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetBooleanField(void * jarg1, void * jarg2,  jfieldID  jarg3, unsigned char jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jboolean arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jboolean)jarg4; 
  (arg1)->SetBooleanField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetByteField(void * jarg1, void * jarg2,  jfieldID  jarg3, signed char jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jbyte arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jbyte)jarg4; 
  (arg1)->SetByteField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetCharField(void * jarg1, void * jarg2,  jfieldID  jarg3, unsigned short jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jchar arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jchar)jarg4; 
  (arg1)->SetCharField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetShortField(void * jarg1, void * jarg2,  jfieldID  jarg3, short jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jshort arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jshort)jarg4; 
  (arg1)->SetShortField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetIntField(void * jarg1, void * jarg2,  jfieldID  jarg3, long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jint arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jint)jarg4; 
  (arg1)->SetIntField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetLongField(void * jarg1, void * jarg2,  jfieldID  jarg3, long long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jlong arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jlong)jarg4; 
  (arg1)->SetLongField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetFloatField(void * jarg1, void * jarg2,  jfieldID  jarg3, float jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jfloat arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jfloat)jarg4; 
  (arg1)->SetFloatField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetDoubleField(void * jarg1, void * jarg2,  jfieldID  jarg3, double jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jdouble arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jdouble)jarg4; 
  (arg1)->SetDoubleField(arg2,arg3,arg4);
}


SWIGEXPORT  jmethodID  SWIGSTDCALL CSharp_JNIEnv_GetStaticMethodID(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  jmethodID  jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  jmethodID result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (jmethodID)(arg1)->GetStaticMethodID(arg2,(char const *)arg3,(char const *)arg4);
  jresult = *(jmethodID*)&result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_CallStaticObjectMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jobject)(arg1)->CallStaticObjectMethod(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_CallStaticObjectMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jobject)(arg1)->CallStaticObjectMethodV(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_CallStaticObjectMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jobject)(arg1)->CallStaticObjectMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JNIEnv_CallStaticBooleanMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jboolean)(arg1)->CallStaticBooleanMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JNIEnv_CallStaticBooleanMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jboolean)(arg1)->CallStaticBooleanMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JNIEnv_CallStaticBooleanMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jboolean)(arg1)->CallStaticBooleanMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_JNIEnv_CallStaticByteMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jbyte)(arg1)->CallStaticByteMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_JNIEnv_CallStaticByteMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jbyte)(arg1)->CallStaticByteMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_JNIEnv_CallStaticByteMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jbyte)(arg1)->CallStaticByteMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_JNIEnv_CallStaticCharMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jchar)(arg1)->CallStaticCharMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_JNIEnv_CallStaticCharMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jchar)(arg1)->CallStaticCharMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_JNIEnv_CallStaticCharMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jchar)(arg1)->CallStaticCharMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_JNIEnv_CallStaticShortMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jshort)(arg1)->CallStaticShortMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_JNIEnv_CallStaticShortMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jshort)(arg1)->CallStaticShortMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_JNIEnv_CallStaticShortMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jshort)(arg1)->CallStaticShortMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_CallStaticIntMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jint)(arg1)->CallStaticIntMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_CallStaticIntMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jint)(arg1)->CallStaticIntMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_CallStaticIntMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jint)(arg1)->CallStaticIntMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_JNIEnv_CallStaticLongMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (arg1)->CallStaticLongMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_JNIEnv_CallStaticLongMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (arg1)->CallStaticLongMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_JNIEnv_CallStaticLongMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (arg1)->CallStaticLongMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_JNIEnv_CallStaticFloatMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jfloat)(arg1)->CallStaticFloatMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_JNIEnv_CallStaticFloatMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jfloat)(arg1)->CallStaticFloatMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_JNIEnv_CallStaticFloatMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jfloat)(arg1)->CallStaticFloatMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_JNIEnv_CallStaticDoubleMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  result = (jdouble)(arg1)->CallStaticDoubleMethod(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_JNIEnv_CallStaticDoubleMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (jdouble)(arg1)->CallStaticDoubleMethodV(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_JNIEnv_CallStaticDoubleMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  result = (jdouble)(arg1)->CallStaticDoubleMethodA(arg2,arg3,(jvalue const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_CallStaticVoidMethod(void * jarg1, void * jarg2,  jmethodID  jarg3) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  (arg1)->CallStaticVoidMethod(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_CallStaticVoidMethodV(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->CallStaticVoidMethodV(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_CallStaticVoidMethodA(void * jarg1, void * jarg2,  jmethodID  jarg3, void * jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jmethodID arg3 = (jmethodID) 0 ;
  jvalue *arg4 = (jvalue *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jmethodID*)&jarg3; 
  arg4 = (jvalue *)jarg4; 
  (arg1)->CallStaticVoidMethodA(arg2,arg3,(jvalue const *)arg4);
}


SWIGEXPORT  jfieldID  SWIGSTDCALL CSharp_JNIEnv_GetStaticFieldID(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  jfieldID  jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  jfieldID result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (jfieldID)(arg1)->GetStaticFieldID(arg2,(char const *)arg3,(char const *)arg4);
  jresult = *(jfieldID*)&result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetStaticObjectField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jobject)(arg1)->GetStaticObjectField(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JNIEnv_GetStaticBooleanField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jboolean)(arg1)->GetStaticBooleanField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_JNIEnv_GetStaticByteField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  signed char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jbyte result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jbyte)(arg1)->GetStaticByteField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_JNIEnv_GetStaticCharField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  unsigned short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jchar result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jchar)(arg1)->GetStaticCharField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_JNIEnv_GetStaticShortField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  short jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jshort result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jshort)(arg1)->GetStaticShortField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_GetStaticIntField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jint)(arg1)->GetStaticIntField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_JNIEnv_GetStaticLongField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (arg1)->GetStaticLongField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_JNIEnv_GetStaticFloatField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  float jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jfloat result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jfloat)(arg1)->GetStaticFloatField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_JNIEnv_GetStaticDoubleField(void * jarg1, void * jarg2,  jfieldID  jarg3) {
  double jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jdouble result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  result = (jdouble)(arg1)->GetStaticDoubleField(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetStaticObjectField(void * jarg1, void * jarg2,  jfieldID  jarg3, void * jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jobject arg4 = (jobject) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jobject)jarg4; 
  (arg1)->SetStaticObjectField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetStaticBooleanField(void * jarg1, void * jarg2,  jfieldID  jarg3, unsigned char jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jboolean arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jboolean)jarg4; 
  (arg1)->SetStaticBooleanField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetStaticByteField(void * jarg1, void * jarg2,  jfieldID  jarg3, signed char jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jbyte arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jbyte)jarg4; 
  (arg1)->SetStaticByteField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetStaticCharField(void * jarg1, void * jarg2,  jfieldID  jarg3, unsigned short jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jchar arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jchar)jarg4; 
  (arg1)->SetStaticCharField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetStaticShortField(void * jarg1, void * jarg2,  jfieldID  jarg3, short jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jshort arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jshort)jarg4; 
  (arg1)->SetStaticShortField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetStaticIntField(void * jarg1, void * jarg2,  jfieldID  jarg3, long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jint arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jint)jarg4; 
  (arg1)->SetStaticIntField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetStaticLongField(void * jarg1, void * jarg2,  jfieldID  jarg3, long long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jlong arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jlong)jarg4; 
  (arg1)->SetStaticLongField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetStaticFloatField(void * jarg1, void * jarg2,  jfieldID  jarg3, float jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jfloat arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jfloat)jarg4; 
  (arg1)->SetStaticFloatField(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetStaticDoubleField(void * jarg1, void * jarg2,  jfieldID  jarg3, double jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jfieldID arg3 = (jfieldID) 0 ;
  jdouble arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = *(jfieldID*)&jarg3; 
  arg4 = (jdouble)jarg4; 
  (arg1)->SetStaticDoubleField(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewString(void * jarg1, void * jarg2, long jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jchar *arg2 = (jchar *) 0 ;
  jsize arg3 ;
  jstring result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jchar *)jarg2; 
  arg3 = (jsize)jarg3; 
  result = (jstring)(arg1)->NewString((jchar const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_GetStringLength(void * jarg1, void * jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jsize result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  result = (jsize)(arg1)->GetStringLength(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetStringChars(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  jchar *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (jchar *)(arg1)->GetStringChars(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_ReleaseStringChars(void * jarg1, void * jarg2, void * jarg3) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jchar *arg3 = (jchar *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (jchar *)jarg3; 
  (arg1)->ReleaseStringChars(arg2,(jchar const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewStringUTF(void * jarg1, char * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  char *arg2 = (char *) 0 ;
  jstring result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (jstring)(arg1)->NewStringUTF((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_GetStringUTFLength(void * jarg1, void * jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jsize result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  result = (jsize)(arg1)->GetStringUTFLength(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_JNIEnv_GetStringUTFChars(void * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  char *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (char *)(arg1)->GetStringUTFChars(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_ReleaseStringUTFChars(void * jarg1, void * jarg2, char * jarg3) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->ReleaseStringUTFChars(arg2,(char const *)arg3);
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_GetArrayLength(void * jarg1, void * jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jarray arg2 = (jarray) 0 ;
  jsize result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jarray)jarg2; 
  result = (jsize)(arg1)->GetArrayLength(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewObjectArray(void * jarg1, long jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jclass arg3 = (jclass) 0 ;
  jobject arg4 = (jobject) 0 ;
  jobjectArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  arg3 = (jclass)jarg3; 
  arg4 = (jobject)jarg4; 
  result = (jobjectArray)(arg1)->NewObjectArray(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetObjectArrayElement(void * jarg1, void * jarg2, long jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobjectArray arg2 = (jobjectArray) 0 ;
  jsize arg3 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobjectArray)jarg2; 
  arg3 = (jsize)jarg3; 
  result = (jobject)(arg1)->GetObjectArrayElement(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetObjectArrayElement(void * jarg1, void * jarg2, long jarg3, void * jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobjectArray arg2 = (jobjectArray) 0 ;
  jsize arg3 ;
  jobject arg4 = (jobject) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobjectArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jobject)jarg4; 
  (arg1)->SetObjectArrayElement(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewBooleanArray(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jbooleanArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jbooleanArray)(arg1)->NewBooleanArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewByteArray(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jbyteArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jbyteArray)(arg1)->NewByteArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewCharArray(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jcharArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jcharArray)(arg1)->NewCharArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewShortArray(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jshortArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jshortArray)(arg1)->NewShortArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewIntArray(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jintArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jintArray)(arg1)->NewIntArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewLongArray(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jlongArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jlongArray)(arg1)->NewLongArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewFloatArray(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jfloatArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jfloatArray)(arg1)->NewFloatArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewDoubleArray(void * jarg1, long jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jsize arg2 ;
  jdoubleArray result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jsize)jarg2; 
  result = (jdoubleArray)(arg1)->NewDoubleArray(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetBooleanArrayElements(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jbooleanArray arg2 = (jbooleanArray) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  jboolean *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jbooleanArray)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (jboolean *)(arg1)->GetBooleanArrayElements(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetByteArrayElements(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jbyteArray arg2 = (jbyteArray) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  jbyte *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jbyteArray)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (jbyte *)(arg1)->GetByteArrayElements(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetCharArrayElements(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jcharArray arg2 = (jcharArray) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  jchar *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jcharArray)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (jchar *)(arg1)->GetCharArrayElements(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetShortArrayElements(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jshortArray arg2 = (jshortArray) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  jshort *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jshortArray)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (jshort *)(arg1)->GetShortArrayElements(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetIntArrayElements(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jintArray arg2 = (jintArray) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  jint *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jintArray)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (jint *)(arg1)->GetIntArrayElements(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetLongArrayElements(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jlongArray arg2 = (jlongArray) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  jlong *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jlongArray)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (jlong *)(arg1)->GetLongArrayElements(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetFloatArrayElements(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jfloatArray arg2 = (jfloatArray) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  jfloat *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jfloatArray)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (jfloat *)(arg1)->GetFloatArrayElements(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetDoubleArrayElements(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jdoubleArray arg2 = (jdoubleArray) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  jdouble *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jdoubleArray)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (jdouble *)(arg1)->GetDoubleArrayElements(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_ReleaseBooleanArrayElements(void * jarg1, void * jarg2, void * jarg3, long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jbooleanArray arg2 = (jbooleanArray) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  jint arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jbooleanArray)jarg2; 
  arg3 = (jboolean *)jarg3; 
  arg4 = (jint)jarg4; 
  (arg1)->ReleaseBooleanArrayElements(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_ReleaseByteArrayElements(void * jarg1, void * jarg2, void * jarg3, long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jbyteArray arg2 = (jbyteArray) 0 ;
  jbyte *arg3 = (jbyte *) 0 ;
  jint arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jbyteArray)jarg2; 
  arg3 = (jbyte *)jarg3; 
  arg4 = (jint)jarg4; 
  (arg1)->ReleaseByteArrayElements(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_ReleaseCharArrayElements(void * jarg1, void * jarg2, void * jarg3, long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jcharArray arg2 = (jcharArray) 0 ;
  jchar *arg3 = (jchar *) 0 ;
  jint arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jcharArray)jarg2; 
  arg3 = (jchar *)jarg3; 
  arg4 = (jint)jarg4; 
  (arg1)->ReleaseCharArrayElements(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_ReleaseShortArrayElements(void * jarg1, void * jarg2, void * jarg3, long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jshortArray arg2 = (jshortArray) 0 ;
  jshort *arg3 = (jshort *) 0 ;
  jint arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jshortArray)jarg2; 
  arg3 = (jshort *)jarg3; 
  arg4 = (jint)jarg4; 
  (arg1)->ReleaseShortArrayElements(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_ReleaseIntArrayElements(void * jarg1, void * jarg2, void * jarg3, long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jintArray arg2 = (jintArray) 0 ;
  jint *arg3 = (jint *) 0 ;
  jint arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jintArray)jarg2; 
  arg3 = (jint *)jarg3; 
  arg4 = (jint)jarg4; 
  (arg1)->ReleaseIntArrayElements(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_ReleaseLongArrayElements(void * jarg1, void * jarg2, void * jarg3, long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jlongArray arg2 = (jlongArray) 0 ;
  jlong *arg3 = (jlong *) 0 ;
  jint arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jlongArray)jarg2; 
  arg3 = (jlong *)jarg3; 
  arg4 = (jint)jarg4; 
  (arg1)->ReleaseLongArrayElements(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_ReleaseFloatArrayElements(void * jarg1, void * jarg2, void * jarg3, long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jfloatArray arg2 = (jfloatArray) 0 ;
  jfloat *arg3 = (jfloat *) 0 ;
  jint arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jfloatArray)jarg2; 
  arg3 = (jfloat *)jarg3; 
  arg4 = (jint)jarg4; 
  (arg1)->ReleaseFloatArrayElements(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_ReleaseDoubleArrayElements(void * jarg1, void * jarg2, void * jarg3, long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jdoubleArray arg2 = (jdoubleArray) 0 ;
  jdouble *arg3 = (jdouble *) 0 ;
  jint arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jdoubleArray)jarg2; 
  arg3 = (jdouble *)jarg3; 
  arg4 = (jint)jarg4; 
  (arg1)->ReleaseDoubleArrayElements(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_GetBooleanArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, unsigned char* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jbooleanArray arg2 = (jbooleanArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jboolean *arg5 = (jboolean *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jbooleanArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetBooleanArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_GetByteArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, signed char* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jbyteArray arg2 = (jbyteArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jbyte *arg5 = (jbyte *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jbyteArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetByteArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_GetCharArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, unsigned short* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jcharArray arg2 = (jcharArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jchar *arg5 = (jchar *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jcharArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetCharArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_GetShortArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, short* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jshortArray arg2 = (jshortArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jshort *arg5 = (jshort *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jshortArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetShortArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_GetIntArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, long* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jintArray arg2 = (jintArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jint *arg5 = (jint *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jintArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetIntArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_GetLongArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, jlong* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jlongArray arg2 = (jlongArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jlong *arg5 = (jlong *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jlongArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetLongArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_GetFloatArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, float* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jfloatArray arg2 = (jfloatArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jfloat *arg5 = (jfloat *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jfloatArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetFloatArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_GetDoubleArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, double* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jdoubleArray arg2 = (jdoubleArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jdouble *arg5 = (jdouble *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jdoubleArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetDoubleArrayRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetBooleanArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, unsigned char* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jbooleanArray arg2 = (jbooleanArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jboolean *arg5 = (jboolean *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jbooleanArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetBooleanArrayRegion(arg2,arg3,arg4,(jboolean const *)arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetByteArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, signed char* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jbyteArray arg2 = (jbyteArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jbyte *arg5 = (jbyte *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jbyteArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetByteArrayRegion(arg2,arg3,arg4,(jbyte const *)arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetCharArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, unsigned short* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jcharArray arg2 = (jcharArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jchar *arg5 = (jchar *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jcharArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetCharArrayRegion(arg2,arg3,arg4,(jchar const *)arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetShortArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, short* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jshortArray arg2 = (jshortArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jshort *arg5 = (jshort *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jshortArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetShortArrayRegion(arg2,arg3,arg4,(jshort const *)arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetIntArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, long* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jintArray arg2 = (jintArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jint *arg5 = (jint *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jintArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetIntArrayRegion(arg2,arg3,arg4,(jint const *)arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetLongArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, jlong* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jlongArray arg2 = (jlongArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jlong *arg5 = (jlong *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jlongArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetLongArrayRegion(arg2,arg3,arg4,(jlong const *)arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetFloatArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, float* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jfloatArray arg2 = (jfloatArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jfloat *arg5 = (jfloat *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jfloatArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetFloatArrayRegion(arg2,arg3,arg4,(jfloat const *)arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_SetDoubleArrayRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, double* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jdoubleArray arg2 = (jdoubleArray) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jdouble *arg5 = (jdouble *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jdoubleArray)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->SetDoubleArrayRegion(arg2,arg3,arg4,(jdouble const *)arg5);
  
  
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_RegisterNatives(void * jarg1, void * jarg2, void * jarg3, long jarg4) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  JNINativeMethod *arg3 = (JNINativeMethod *) 0 ;
  jint arg4 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  arg3 = (JNINativeMethod *)jarg3; 
  arg4 = (jint)jarg4; 
  result = (jint)(arg1)->RegisterNatives(arg2,(JNINativeMethod const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_UnregisterNatives(void * jarg1, void * jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jclass arg2 = (jclass) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jclass)jarg2; 
  result = (jint)(arg1)->UnregisterNatives(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_MonitorEnter(void * jarg1, void * jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jint)(arg1)->MonitorEnter(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNIEnv_MonitorExit(void * jarg1, void * jarg2) {
  long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jint result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jint)(arg1)->MonitorExit(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_GetStringRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, unsigned short* jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  jchar *arg5 = (jchar *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = jarg5;
  (arg1)->GetStringRegion(arg2,arg3,arg4,arg5);
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_GetStringUTFRegion(void * jarg1, void * jarg2, long jarg3, long jarg4, char * jarg5) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jsize arg3 ;
  jsize arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (jsize)jarg3; 
  arg4 = (jsize)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->GetStringUTFRegion(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetPrimitiveArrayCritical(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jarray arg2 = (jarray) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  void *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jarray)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (void *)(arg1)->GetPrimitiveArrayCritical(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_ReleasePrimitiveArrayCritical(void * jarg1, void * jarg2, void * jarg3, long jarg4) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jarray arg2 = (jarray) 0 ;
  void *arg3 = (void *) 0 ;
  jint arg4 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jarray)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (jint)jarg4; 
  (arg1)->ReleasePrimitiveArrayCritical(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetStringCritical(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jboolean *arg3 = (jboolean *) 0 ;
  jchar *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (jboolean *)jarg3; 
  result = (jchar *)(arg1)->GetStringCritical(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_ReleaseStringCritical(void * jarg1, void * jarg2, void * jarg3) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jstring arg2 = (jstring) 0 ;
  jchar *arg3 = (jchar *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jstring)jarg2; 
  arg3 = (jchar *)jarg3; 
  (arg1)->ReleaseStringCritical(arg2,(jchar const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewWeakGlobalRef(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jweak result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jweak)(arg1)->NewWeakGlobalRef(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNIEnv_DeleteWeakGlobalRef(void * jarg1, void * jarg2) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jweak arg2 = (jweak) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jweak)jarg2; 
  (arg1)->DeleteWeakGlobalRef(arg2);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_JNIEnv_ExceptionCheck(void * jarg1) {
  unsigned char jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jboolean result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  result = (jboolean)(arg1)->ExceptionCheck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_NewDirectByteBuffer(void * jarg1, void * jarg2, long long jarg3) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  void *arg2 = (void *) 0 ;
  jlong arg3 ;
  jobject result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (jlong)jarg3; 
  result = (jobject)(arg1)->NewDirectByteBuffer(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JNIEnv_GetDirectBufferAddress(void * jarg1, void * jarg2) {
  void * jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  void *result = 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (void *)(arg1)->GetDirectBufferAddress(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_JNIEnv_GetDirectBufferCapacity(void * jarg1, void * jarg2) {
  long long jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jlong result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (arg1)->GetDirectBufferCapacity(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNIEnv_GetObjectRefType(void * jarg1, void * jarg2) {
  int jresult ;
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  jobject arg2 = (jobject) 0 ;
  jobjectRefType result;
  
  arg1 = (JNIEnv_ *)jarg1; 
  arg2 = (jobject)jarg2; 
  result = (jobjectRefType)(arg1)->GetObjectRefType(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JNIEnv() {
  void * jresult ;
  JNIEnv_ *result = 0 ;
  
  result = (JNIEnv_ *)new JNIEnv_();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JNIEnv(void * jarg1) {
  JNIEnv_ *arg1 = (JNIEnv_ *) 0 ;
  
  arg1 = (JNIEnv_ *)jarg1; 
  delete arg1;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JavaVM_DestroyJavaVM(void * jarg1) {
  long jresult ;
  JavaVM_ *arg1 = (JavaVM_ *) 0 ;
  jint result;
  
  arg1 = (JavaVM_ *)jarg1; 
  result = (jint)(arg1)->DestroyJavaVM();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JavaVM_AttachCurrentThread(void * jarg1, void * jarg2, void * jarg3) {
  long jresult ;
  JavaVM_ *arg1 = (JavaVM_ *) 0 ;
  void **arg2 = (void **) 0 ;
  void *arg3 = (void *) 0 ;
  jint result;
  
  arg1 = (JavaVM_ *)jarg1; 
  arg2 = (void **)jarg2; 
  arg3 = (void *)jarg3; 
  result = (jint)(arg1)->AttachCurrentThread(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JavaVM_DetachCurrentThread(void * jarg1) {
  long jresult ;
  JavaVM_ *arg1 = (JavaVM_ *) 0 ;
  jint result;
  
  arg1 = (JavaVM_ *)jarg1; 
  result = (jint)(arg1)->DetachCurrentThread();
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JavaVM_GetEnv(void * jarg1, void * jarg2, long jarg3) {
  long jresult ;
  JavaVM_ *arg1 = (JavaVM_ *) 0 ;
  void **arg2 = (void **) 0 ;
  jint arg3 ;
  jint result;
  
  arg1 = (JavaVM_ *)jarg1; 
  arg2 = (void **)jarg2; 
  arg3 = (jint)jarg3; 
  result = (jint)(arg1)->GetEnv(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JavaVM_AttachCurrentThreadAsDaemon(void * jarg1, void * jarg2, void * jarg3) {
  long jresult ;
  JavaVM_ *arg1 = (JavaVM_ *) 0 ;
  void **arg2 = (void **) 0 ;
  void *arg3 = (void *) 0 ;
  jint result;
  
  arg1 = (JavaVM_ *)jarg1; 
  arg2 = (void **)jarg2; 
  arg3 = (void *)jarg3; 
  result = (jint)(arg1)->AttachCurrentThreadAsDaemon(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JavaVM() {
  void * jresult ;
  JavaVM_ *result = 0 ;
  
  result = (JavaVM_ *)new JavaVM_();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JavaVM(void * jarg1) {
  JavaVM_ *arg1 = (JavaVM_ *) 0 ;
  
  arg1 = (JavaVM_ *)jarg1; 
  delete arg1;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNI_GetDefaultJavaVMInitArgs(void * jarg1) {
  long jresult ;
  void *arg1 = (void *) 0 ;
  jint result;
  
  arg1 = (void *)jarg1; 
  result = (jint)JNI_GetDefaultJavaVMInitArgs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_JNI_OnLoad(void * jarg1, void * jarg2) {
  long jresult ;
  JavaVM *arg1 = (JavaVM *) 0 ;
  void *arg2 = (void *) 0 ;
  jint result;
  
  arg1 = (JavaVM *)jarg1; 
  arg2 = (void *)jarg2; 
  result = (jint)JNI_OnLoad(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_JNI_OnUnload(void * jarg1, void * jarg2) {
  JavaVM *arg1 = (JavaVM *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (JavaVM *)jarg1; 
  arg2 = (void *)jarg2; 
  JNI_OnUnload(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_VERSION_1_1_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00010001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_VERSION_1_2_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00010002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_VERSION_1_4_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00010004);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_VERSION_1_6_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00010006);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_JNI_VERSION_1_8_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00010008);
  jresult = result; 
  return jresult;
}


SWIGEXPORT _jobject * SWIGSTDCALL CSharp_JClass_SWIGUpcast(_jclass *jarg1) {
    return (_jobject *)jarg1;
}

SWIGEXPORT _jobject * SWIGSTDCALL CSharp_JThrowable_SWIGUpcast(_jthrowable *jarg1) {
    return (_jobject *)jarg1;
}

SWIGEXPORT _jobject * SWIGSTDCALL CSharp_JString_SWIGUpcast(_jstring *jarg1) {
    return (_jobject *)jarg1;
}

SWIGEXPORT _jobject * SWIGSTDCALL CSharp_JArray_SWIGUpcast(_jarray *jarg1) {
    return (_jobject *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_JBooleanArray_SWIGUpcast(_jbooleanArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_JByteArray_SWIGUpcast(_jbyteArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_JCharArray_SWIGUpcast(_jcharArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_JShortArray_SWIGUpcast(_jshortArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_JIntArray_SWIGUpcast(_jintArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_JLongArray_SWIGUpcast(_jlongArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_JFloatArray_SWIGUpcast(_jfloatArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_JDoubleArray_SWIGUpcast(_jdoubleArray *jarg1) {
    return (_jarray *)jarg1;
}

SWIGEXPORT _jarray * SWIGSTDCALL CSharp_JObjectArray_SWIGUpcast(_jobjectArray *jarg1) {
    return (_jarray *)jarg1;
}

#ifdef __cplusplus
}
#endif

